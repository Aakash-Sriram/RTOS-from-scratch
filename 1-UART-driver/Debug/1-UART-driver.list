
1-UART-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000012e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001484  08001484  00002484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080014c8  080014c8  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080014c8  080014c8  000024c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080014d0  080014d0  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080014d0  080014d0  000024d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080014d4  080014d4  000024d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080014d8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08001534  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08001534  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001067  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000551  00000000  00000000  000040f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000180  00000000  00000000  00004648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000103  00000000  00000000  000047c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fbe8  00000000  00000000  000048cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d3e  00000000  00000000  000144b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055aa1  00000000  00000000  000161f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006bc92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c20  00000000  00000000  0006bcd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0006c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800146c 	.word	0x0800146c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800146c 	.word	0x0800146c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <led_init>:

#define GPIOAEN        (1U<<0)// 0b 0000 0000 0000 0000 0000 0000 0000 0000 -> 0001
//sets all bits except bit no.1 to zero so if there are
//any other GPIO ports we depend on the state of them will be altered
///soooooo , use OR operator so the other ports in use stays on
void led_init(void){
 8000280:	b480      	push	{r7}
 8000282:	af00      	add	r7, sp, #0
	//Enable clock access to led port (port A)

	//RCC->AHB1ENR = GPIOAEN; bad
	RCC->AHB1ENR |=GPIOAEN; // Noice
 8000284:	4b0b      	ldr	r3, [pc, #44]	@ (80002b4 <led_init+0x34>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000288:	4a0a      	ldr	r2, [pc, #40]	@ (80002b4 <led_init+0x34>)
 800028a:	f043 0301 	orr.w	r3, r3, #1
 800028e:	6313      	str	r3, [r2, #48]	@ 0x30
	//Why ?
//	gpio has atleast 2 register -> direction reg and data reg
//	direction reg -> should the pin be input(accept v) or vice versa
//	data reg -> should the pin recieve data or vice versa
//nowadays there are 10+ reg like pull down , speed and other params
	GPIOA->MODER |= (1U<<10); //set bit 10 to 1
 8000290:	4b09      	ldr	r3, [pc, #36]	@ (80002b8 <led_init+0x38>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a08      	ldr	r2, [pc, #32]	@ (80002b8 <led_init+0x38>)
 8000296:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);//set bit 11 to 0
 800029c:	4b06      	ldr	r3, [pc, #24]	@ (80002b8 <led_init+0x38>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a05      	ldr	r2, [pc, #20]	@ (80002b8 <led_init+0x38>)
 80002a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80002a6:	6013      	str	r3, [r2, #0]

}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr
 80002b2:	bf00      	nop
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020000 	.word	0x40020000

080002bc <led_on>:
void led_on(void){
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
//set led pin HIGH

	GPIOA->ODR|=(1U<<5);
 80002c0:	4b05      	ldr	r3, [pc, #20]	@ (80002d8 <led_on+0x1c>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a04      	ldr	r2, [pc, #16]	@ (80002d8 <led_on+0x1c>)
 80002c6:	f043 0320 	orr.w	r3, r3, #32
 80002ca:	6153      	str	r3, [r2, #20]
}
 80002cc:	bf00      	nop
 80002ce:	46bd      	mov	sp, r7
 80002d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d4:	4770      	bx	lr
 80002d6:	bf00      	nop
 80002d8:	40020000 	.word	0x40020000

080002dc <led_off>:
void led_off(void){
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
//set led pin LOW
	GPIOA->ODR&=~(1U<<5);
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <led_off+0x1c>)
 80002e2:	695b      	ldr	r3, [r3, #20]
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <led_off+0x1c>)
 80002e6:	f023 0320 	bic.w	r3, r3, #32
 80002ea:	6153      	str	r3, [r2, #20]
}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <main>:
#include"led.h"
int main(void){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
	uart_tx_init();
 8000302:	f000 f8d7 	bl	80004b4 <uart_tx_init>
	led_init();
 8000306:	f7ff ffbb 	bl	8000280 <led_init>
	for(int i=0;i<100000;i++){
 800030a:	2300      	movs	r3, #0
 800030c:	607b      	str	r3, [r7, #4]
 800030e:	e014      	b.n	800033a <main+0x3e>
	printf("Hello from STM32");
 8000310:	480e      	ldr	r0, [pc, #56]	@ (800034c <main+0x50>)
 8000312:	f000 fa3f 	bl	8000794 <iprintf>
	led_on();
 8000316:	f7ff ffd1 	bl	80002bc <led_on>
	for(int i=0;i<10000;i++){}
 800031a:	2300      	movs	r3, #0
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	e002      	b.n	8000326 <main+0x2a>
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	3301      	adds	r3, #1
 8000324:	603b      	str	r3, [r7, #0]
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	f242 720f 	movw	r2, #9999	@ 0x270f
 800032c:	4293      	cmp	r3, r2
 800032e:	ddf7      	ble.n	8000320 <main+0x24>
	led_off();
 8000330:	f7ff ffd4 	bl	80002dc <led_off>
	for(int i=0;i<100000;i++){
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	3301      	adds	r3, #1
 8000338:	607b      	str	r3, [r7, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4a04      	ldr	r2, [pc, #16]	@ (8000350 <main+0x54>)
 800033e:	4293      	cmp	r3, r2
 8000340:	dde6      	ble.n	8000310 <main+0x14>
 8000342:	2300      	movs	r3, #0
	}
}
 8000344:	4618      	mov	r0, r3
 8000346:	3708      	adds	r7, #8
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	08001484 	.word	0x08001484
 8000350:	0001869f 	.word	0x0001869f

08000354 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b086      	sub	sp, #24
 8000358:	af00      	add	r7, sp, #0
 800035a:	60f8      	str	r0, [r7, #12]
 800035c:	60b9      	str	r1, [r7, #8]
 800035e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000360:	2300      	movs	r3, #0
 8000362:	617b      	str	r3, [r7, #20]
 8000364:	e00a      	b.n	800037c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000366:	f3af 8000 	nop.w
 800036a:	4601      	mov	r1, r0
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	60ba      	str	r2, [r7, #8]
 8000372:	b2ca      	uxtb	r2, r1
 8000374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	3301      	adds	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	429a      	cmp	r2, r3
 8000382:	dbf0      	blt.n	8000366 <_read+0x12>
  }

  return len;
 8000384:	687b      	ldr	r3, [r7, #4]
}
 8000386:	4618      	mov	r0, r3
 8000388:	3718      	adds	r7, #24
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b086      	sub	sp, #24
 8000392:	af00      	add	r7, sp, #0
 8000394:	60f8      	str	r0, [r7, #12]
 8000396:	60b9      	str	r1, [r7, #8]
 8000398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039a:	2300      	movs	r3, #0
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	e009      	b.n	80003b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80003a0:	68bb      	ldr	r3, [r7, #8]
 80003a2:	1c5a      	adds	r2, r3, #1
 80003a4:	60ba      	str	r2, [r7, #8]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f877 	bl	800049c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	3301      	adds	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	dbf1      	blt.n	80003a0 <_write+0x12>
  }
  return len;
 80003bc:	687b      	ldr	r3, [r7, #4]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <_close>:

int _close(int file)
{
 80003c6:	b480      	push	{r7}
 80003c8:	b083      	sub	sp, #12
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80003ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80003d2:	4618      	mov	r0, r3
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003dc:	4770      	bx	lr

080003de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80003de:	b480      	push	{r7}
 80003e0:	b083      	sub	sp, #12
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	6078      	str	r0, [r7, #4]
 80003e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80003ee:	605a      	str	r2, [r3, #4]
  return 0;
 80003f0:	2300      	movs	r3, #0
}
 80003f2:	4618      	mov	r0, r3
 80003f4:	370c      	adds	r7, #12
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr

080003fe <_isatty>:

int _isatty(int file)
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000406:	2301      	movs	r3, #1
}
 8000408:	4618      	mov	r0, r3
 800040a:	370c      	adds	r7, #12
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr

08000414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	60f8      	str	r0, [r7, #12]
 800041c:	60b9      	str	r1, [r7, #8]
 800041e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000420:	2300      	movs	r3, #0
}
 8000422:	4618      	mov	r0, r3
 8000424:	3714      	adds	r7, #20
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
	...

08000430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b086      	sub	sp, #24
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000438:	4a14      	ldr	r2, [pc, #80]	@ (800048c <_sbrk+0x5c>)
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <_sbrk+0x60>)
 800043c:	1ad3      	subs	r3, r2, r3
 800043e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000440:	697b      	ldr	r3, [r7, #20]
 8000442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000444:	4b13      	ldr	r3, [pc, #76]	@ (8000494 <_sbrk+0x64>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d102      	bne.n	8000452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <_sbrk+0x64>)
 800044e:	4a12      	ldr	r2, [pc, #72]	@ (8000498 <_sbrk+0x68>)
 8000450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000452:	4b10      	ldr	r3, [pc, #64]	@ (8000494 <_sbrk+0x64>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4413      	add	r3, r2
 800045a:	693a      	ldr	r2, [r7, #16]
 800045c:	429a      	cmp	r2, r3
 800045e:	d207      	bcs.n	8000470 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000460:	f000 fa3c 	bl	80008dc <__errno>
 8000464:	4603      	mov	r3, r0
 8000466:	220c      	movs	r2, #12
 8000468:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800046a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800046e:	e009      	b.n	8000484 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000470:	4b08      	ldr	r3, [pc, #32]	@ (8000494 <_sbrk+0x64>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000476:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <_sbrk+0x64>)
 8000478:	681a      	ldr	r2, [r3, #0]
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4413      	add	r3, r2
 800047e:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <_sbrk+0x64>)
 8000480:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000482:	68fb      	ldr	r3, [r7, #12]
}
 8000484:	4618      	mov	r0, r3
 8000486:	3718      	adds	r7, #24
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20020000 	.word	0x20020000
 8000490:	00000400 	.word	0x00000400
 8000494:	20000078 	.word	0x20000078
 8000498:	200001c8 	.word	0x200001c8

0800049c <__io_putchar>:
#define GPIOAEN  (1U<<0)
#define SR_TXE (1U<<7)
#define UAR2EN    (1U<<17)
#define CR1_TE  (1U<<3)
#define CR1_UE (1U<<3)
int __io_putchar(int ch){
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 80004a4:	6878      	ldr	r0, [r7, #4]
 80004a6:	f000 f84d 	bl	8000544 <uart_write>
	return ch;
 80004aa:	687b      	ldr	r3, [r7, #4]
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <uart_tx_init>:
void uart_tx_init(void){
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
	 * Enable clock access to GPIOA
	 * Set PA2 mode to alternate function mode
	 * Set alternate function type to AF7
	 */

	RCC->AHB1ENR |= GPIOAEN;
 80004b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000538 <uart_tx_init+0x84>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000538 <uart_tx_init+0x84>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |= (1U<<5);
 80004c4:	4b1d      	ldr	r3, [pc, #116]	@ (800053c <uart_tx_init+0x88>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	4a1c      	ldr	r2, [pc, #112]	@ (800053c <uart_tx_init+0x88>)
 80004ca:	f043 0320 	orr.w	r3, r3, #32
 80004ce:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<4);
 80004d0:	4b1a      	ldr	r3, [pc, #104]	@ (800053c <uart_tx_init+0x88>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a19      	ldr	r2, [pc, #100]	@ (800053c <uart_tx_init+0x88>)
 80004d6:	f023 0310 	bic.w	r3, r3, #16
 80004da:	6013      	str	r3, [r2, #0]


	GPIOA->AFR[0] &=~(1U<<11);
 80004dc:	4b17      	ldr	r3, [pc, #92]	@ (800053c <uart_tx_init+0x88>)
 80004de:	6a1b      	ldr	r3, [r3, #32]
 80004e0:	4a16      	ldr	r2, [pc, #88]	@ (800053c <uart_tx_init+0x88>)
 80004e2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004e6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80004e8:	4b14      	ldr	r3, [pc, #80]	@ (800053c <uart_tx_init+0x88>)
 80004ea:	6a1b      	ldr	r3, [r3, #32]
 80004ec:	4a13      	ldr	r2, [pc, #76]	@ (800053c <uart_tx_init+0x88>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80004f4:	4b11      	ldr	r3, [pc, #68]	@ (800053c <uart_tx_init+0x88>)
 80004f6:	6a1b      	ldr	r3, [r3, #32]
 80004f8:	4a10      	ldr	r2, [pc, #64]	@ (800053c <uart_tx_init+0x88>)
 80004fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<8);
 8000500:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <uart_tx_init+0x88>)
 8000502:	6a1b      	ldr	r3, [r3, #32]
 8000504:	4a0d      	ldr	r2, [pc, #52]	@ (800053c <uart_tx_init+0x88>)
 8000506:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800050a:	6213      	str	r3, [r2, #32]
	 * configure baud rate
	 * configure transfer direction
	 *Enable the module
	 */

	RCC->APB1ENR |= UAR2EN;
 800050c:	4b0a      	ldr	r3, [pc, #40]	@ (8000538 <uart_tx_init+0x84>)
 800050e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000510:	4a09      	ldr	r2, [pc, #36]	@ (8000538 <uart_tx_init+0x84>)
 8000512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000516:	6413      	str	r3, [r2, #64]	@ 0x40
	uart_set_baudrate(APB1_CLOCK,UART_BAUDRATE);
 8000518:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800051c:	2010      	movs	r0, #16
 800051e:	f000 f83b 	bl	8000598 <uart_set_baudrate>

	USART2->CR1 = CR1_TE;//transmitter enable and set everything else to zero
 8000522:	4b07      	ldr	r3, [pc, #28]	@ (8000540 <uart_tx_init+0x8c>)
 8000524:	2208      	movs	r2, #8
 8000526:	60da      	str	r2, [r3, #12]
	USART2->CR1 |=  CR1_UE;//enable USART
 8000528:	4b05      	ldr	r3, [pc, #20]	@ (8000540 <uart_tx_init+0x8c>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	4a04      	ldr	r2, [pc, #16]	@ (8000540 <uart_tx_init+0x8c>)
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	60d3      	str	r3, [r2, #12]

}
 8000534:	bf00      	nop
 8000536:	bd80      	pop	{r7, pc}
 8000538:	40023800 	.word	0x40023800
 800053c:	40020000 	.word	0x40020000
 8000540:	40004400 	.word	0x40004400

08000544 <uart_write>:



static void uart_write(int ch){
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	/*
	 * make sure transmit data reg is empty
	 * write  transmit data registeer
	 * */
	while( (USART2->SR & SR_TXE) ){}
 800054c:	bf00      	nop
 800054e:	4b08      	ldr	r3, [pc, #32]	@ (8000570 <uart_write+0x2c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000556:	2b00      	cmp	r3, #0
 8000558:	d1f9      	bne.n	800054e <uart_write+0xa>
	USART2->DR = (ch&0XFF);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4a04      	ldr	r2, [pc, #16]	@ (8000570 <uart_write+0x2c>)
 800055e:	b2db      	uxtb	r3, r3
 8000560:	6053      	str	r3, [r2, #4]

}
 8000562:	bf00      	nop
 8000564:	370c      	adds	r7, #12
 8000566:	46bd      	mov	sp, r7
 8000568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop
 8000570:	40004400 	.word	0x40004400

08000574 <uart_config_baudrate>:
static uint32_t uart_config_baudrate(uint32_t peripheral_clock, uint32_t baud) {
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
    return ( (peripheral_clock + (baud / 2U)) / baud );
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	085a      	lsrs	r2, r3, #1
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	441a      	add	r2, r3
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	fbb2 f3f3 	udiv	r3, r2, r3
}
 800058c:	4618      	mov	r0, r3
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t peripheral_clock, uint32_t baud) {
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
    USART2->BRR = uart_config_baudrate(peripheral_clock, baud);
 80005a2:	4c05      	ldr	r4, [pc, #20]	@ (80005b8 <uart_set_baudrate+0x20>)
 80005a4:	6839      	ldr	r1, [r7, #0]
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f7ff ffe4 	bl	8000574 <uart_config_baudrate>
 80005ac:	4603      	mov	r3, r0
 80005ae:	60a3      	str	r3, [r4, #8]
}
 80005b0:	bf00      	nop
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd90      	pop	{r4, r7, pc}
 80005b8:	40004400 	.word	0x40004400

080005bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005bc:	480d      	ldr	r0, [pc, #52]	@ (80005f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005c4:	480c      	ldr	r0, [pc, #48]	@ (80005f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80005c6:	490d      	ldr	r1, [pc, #52]	@ (80005fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80005c8:	4a0d      	ldr	r2, [pc, #52]	@ (8000600 <LoopForever+0xe>)
  movs r3, #0
 80005ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005cc:	e002      	b.n	80005d4 <LoopCopyDataInit>

080005ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005d2:	3304      	adds	r3, #4

080005d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005d8:	d3f9      	bcc.n	80005ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005da:	4a0a      	ldr	r2, [pc, #40]	@ (8000604 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005dc:	4c0a      	ldr	r4, [pc, #40]	@ (8000608 <LoopForever+0x16>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005e0:	e001      	b.n	80005e6 <LoopFillZerobss>

080005e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005e4:	3204      	adds	r2, #4

080005e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005e8:	d3fb      	bcc.n	80005e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005ea:	f000 f97d 	bl	80008e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ee:	f7ff fe85 	bl	80002fc <main>

080005f2 <LoopForever>:

LoopForever:
  b LoopForever
 80005f2:	e7fe      	b.n	80005f2 <LoopForever>
  ldr   r0, =_estack
 80005f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005fc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000600:	080014d8 	.word	0x080014d8
  ldr r2, =_sbss
 8000604:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000608:	200001c8 	.word	0x200001c8

0800060c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800060c:	e7fe      	b.n	800060c <ADC_IRQHandler>
	...

08000610 <std>:
 8000610:	2300      	movs	r3, #0
 8000612:	b510      	push	{r4, lr}
 8000614:	4604      	mov	r4, r0
 8000616:	e9c0 3300 	strd	r3, r3, [r0]
 800061a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800061e:	6083      	str	r3, [r0, #8]
 8000620:	8181      	strh	r1, [r0, #12]
 8000622:	6643      	str	r3, [r0, #100]	@ 0x64
 8000624:	81c2      	strh	r2, [r0, #14]
 8000626:	6183      	str	r3, [r0, #24]
 8000628:	4619      	mov	r1, r3
 800062a:	2208      	movs	r2, #8
 800062c:	305c      	adds	r0, #92	@ 0x5c
 800062e:	f000 f906 	bl	800083e <memset>
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <std+0x58>)
 8000634:	6263      	str	r3, [r4, #36]	@ 0x24
 8000636:	4b0d      	ldr	r3, [pc, #52]	@ (800066c <std+0x5c>)
 8000638:	62a3      	str	r3, [r4, #40]	@ 0x28
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <std+0x60>)
 800063c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800063e:	4b0d      	ldr	r3, [pc, #52]	@ (8000674 <std+0x64>)
 8000640:	6323      	str	r3, [r4, #48]	@ 0x30
 8000642:	4b0d      	ldr	r3, [pc, #52]	@ (8000678 <std+0x68>)
 8000644:	6224      	str	r4, [r4, #32]
 8000646:	429c      	cmp	r4, r3
 8000648:	d006      	beq.n	8000658 <std+0x48>
 800064a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800064e:	4294      	cmp	r4, r2
 8000650:	d002      	beq.n	8000658 <std+0x48>
 8000652:	33d0      	adds	r3, #208	@ 0xd0
 8000654:	429c      	cmp	r4, r3
 8000656:	d105      	bne.n	8000664 <std+0x54>
 8000658:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800065c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000660:	f000 b966 	b.w	8000930 <__retarget_lock_init_recursive>
 8000664:	bd10      	pop	{r4, pc}
 8000666:	bf00      	nop
 8000668:	080007b9 	.word	0x080007b9
 800066c:	080007db 	.word	0x080007db
 8000670:	08000813 	.word	0x08000813
 8000674:	08000837 	.word	0x08000837
 8000678:	2000007c 	.word	0x2000007c

0800067c <stdio_exit_handler>:
 800067c:	4a02      	ldr	r2, [pc, #8]	@ (8000688 <stdio_exit_handler+0xc>)
 800067e:	4903      	ldr	r1, [pc, #12]	@ (800068c <stdio_exit_handler+0x10>)
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <stdio_exit_handler+0x14>)
 8000682:	f000 b869 	b.w	8000758 <_fwalk_sglue>
 8000686:	bf00      	nop
 8000688:	20000000 	.word	0x20000000
 800068c:	080011cd 	.word	0x080011cd
 8000690:	20000010 	.word	0x20000010

08000694 <cleanup_stdio>:
 8000694:	6841      	ldr	r1, [r0, #4]
 8000696:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <cleanup_stdio+0x34>)
 8000698:	4299      	cmp	r1, r3
 800069a:	b510      	push	{r4, lr}
 800069c:	4604      	mov	r4, r0
 800069e:	d001      	beq.n	80006a4 <cleanup_stdio+0x10>
 80006a0:	f000 fd94 	bl	80011cc <_fflush_r>
 80006a4:	68a1      	ldr	r1, [r4, #8]
 80006a6:	4b09      	ldr	r3, [pc, #36]	@ (80006cc <cleanup_stdio+0x38>)
 80006a8:	4299      	cmp	r1, r3
 80006aa:	d002      	beq.n	80006b2 <cleanup_stdio+0x1e>
 80006ac:	4620      	mov	r0, r4
 80006ae:	f000 fd8d 	bl	80011cc <_fflush_r>
 80006b2:	68e1      	ldr	r1, [r4, #12]
 80006b4:	4b06      	ldr	r3, [pc, #24]	@ (80006d0 <cleanup_stdio+0x3c>)
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d004      	beq.n	80006c4 <cleanup_stdio+0x30>
 80006ba:	4620      	mov	r0, r4
 80006bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006c0:	f000 bd84 	b.w	80011cc <_fflush_r>
 80006c4:	bd10      	pop	{r4, pc}
 80006c6:	bf00      	nop
 80006c8:	2000007c 	.word	0x2000007c
 80006cc:	200000e4 	.word	0x200000e4
 80006d0:	2000014c 	.word	0x2000014c

080006d4 <global_stdio_init.part.0>:
 80006d4:	b510      	push	{r4, lr}
 80006d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <global_stdio_init.part.0+0x30>)
 80006d8:	4c0b      	ldr	r4, [pc, #44]	@ (8000708 <global_stdio_init.part.0+0x34>)
 80006da:	4a0c      	ldr	r2, [pc, #48]	@ (800070c <global_stdio_init.part.0+0x38>)
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	4620      	mov	r0, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	2104      	movs	r1, #4
 80006e4:	f7ff ff94 	bl	8000610 <std>
 80006e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006ec:	2201      	movs	r2, #1
 80006ee:	2109      	movs	r1, #9
 80006f0:	f7ff ff8e 	bl	8000610 <std>
 80006f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006f8:	2202      	movs	r2, #2
 80006fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006fe:	2112      	movs	r1, #18
 8000700:	f7ff bf86 	b.w	8000610 <std>
 8000704:	200001b4 	.word	0x200001b4
 8000708:	2000007c 	.word	0x2000007c
 800070c:	0800067d 	.word	0x0800067d

08000710 <__sfp_lock_acquire>:
 8000710:	4801      	ldr	r0, [pc, #4]	@ (8000718 <__sfp_lock_acquire+0x8>)
 8000712:	f000 b90e 	b.w	8000932 <__retarget_lock_acquire_recursive>
 8000716:	bf00      	nop
 8000718:	200001bd 	.word	0x200001bd

0800071c <__sfp_lock_release>:
 800071c:	4801      	ldr	r0, [pc, #4]	@ (8000724 <__sfp_lock_release+0x8>)
 800071e:	f000 b909 	b.w	8000934 <__retarget_lock_release_recursive>
 8000722:	bf00      	nop
 8000724:	200001bd 	.word	0x200001bd

08000728 <__sinit>:
 8000728:	b510      	push	{r4, lr}
 800072a:	4604      	mov	r4, r0
 800072c:	f7ff fff0 	bl	8000710 <__sfp_lock_acquire>
 8000730:	6a23      	ldr	r3, [r4, #32]
 8000732:	b11b      	cbz	r3, 800073c <__sinit+0x14>
 8000734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000738:	f7ff bff0 	b.w	800071c <__sfp_lock_release>
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <__sinit+0x28>)
 800073e:	6223      	str	r3, [r4, #32]
 8000740:	4b04      	ldr	r3, [pc, #16]	@ (8000754 <__sinit+0x2c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1f5      	bne.n	8000734 <__sinit+0xc>
 8000748:	f7ff ffc4 	bl	80006d4 <global_stdio_init.part.0>
 800074c:	e7f2      	b.n	8000734 <__sinit+0xc>
 800074e:	bf00      	nop
 8000750:	08000695 	.word	0x08000695
 8000754:	200001b4 	.word	0x200001b4

08000758 <_fwalk_sglue>:
 8000758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800075c:	4607      	mov	r7, r0
 800075e:	4688      	mov	r8, r1
 8000760:	4614      	mov	r4, r2
 8000762:	2600      	movs	r6, #0
 8000764:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000768:	f1b9 0901 	subs.w	r9, r9, #1
 800076c:	d505      	bpl.n	800077a <_fwalk_sglue+0x22>
 800076e:	6824      	ldr	r4, [r4, #0]
 8000770:	2c00      	cmp	r4, #0
 8000772:	d1f7      	bne.n	8000764 <_fwalk_sglue+0xc>
 8000774:	4630      	mov	r0, r6
 8000776:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800077a:	89ab      	ldrh	r3, [r5, #12]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d907      	bls.n	8000790 <_fwalk_sglue+0x38>
 8000780:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000784:	3301      	adds	r3, #1
 8000786:	d003      	beq.n	8000790 <_fwalk_sglue+0x38>
 8000788:	4629      	mov	r1, r5
 800078a:	4638      	mov	r0, r7
 800078c:	47c0      	blx	r8
 800078e:	4306      	orrs	r6, r0
 8000790:	3568      	adds	r5, #104	@ 0x68
 8000792:	e7e9      	b.n	8000768 <_fwalk_sglue+0x10>

08000794 <iprintf>:
 8000794:	b40f      	push	{r0, r1, r2, r3}
 8000796:	b507      	push	{r0, r1, r2, lr}
 8000798:	4906      	ldr	r1, [pc, #24]	@ (80007b4 <iprintf+0x20>)
 800079a:	ab04      	add	r3, sp, #16
 800079c:	6808      	ldr	r0, [r1, #0]
 800079e:	f853 2b04 	ldr.w	r2, [r3], #4
 80007a2:	6881      	ldr	r1, [r0, #8]
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	f000 f9e9 	bl	8000b7c <_vfiprintf_r>
 80007aa:	b003      	add	sp, #12
 80007ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80007b0:	b004      	add	sp, #16
 80007b2:	4770      	bx	lr
 80007b4:	2000000c 	.word	0x2000000c

080007b8 <__sread>:
 80007b8:	b510      	push	{r4, lr}
 80007ba:	460c      	mov	r4, r1
 80007bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007c0:	f000 f868 	bl	8000894 <_read_r>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	bfab      	itete	ge
 80007c8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80007ca:	89a3      	ldrhlt	r3, [r4, #12]
 80007cc:	181b      	addge	r3, r3, r0
 80007ce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80007d2:	bfac      	ite	ge
 80007d4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80007d6:	81a3      	strhlt	r3, [r4, #12]
 80007d8:	bd10      	pop	{r4, pc}

080007da <__swrite>:
 80007da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80007de:	461f      	mov	r7, r3
 80007e0:	898b      	ldrh	r3, [r1, #12]
 80007e2:	05db      	lsls	r3, r3, #23
 80007e4:	4605      	mov	r5, r0
 80007e6:	460c      	mov	r4, r1
 80007e8:	4616      	mov	r6, r2
 80007ea:	d505      	bpl.n	80007f8 <__swrite+0x1e>
 80007ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007f0:	2302      	movs	r3, #2
 80007f2:	2200      	movs	r2, #0
 80007f4:	f000 f83c 	bl	8000870 <_lseek_r>
 80007f8:	89a3      	ldrh	r3, [r4, #12]
 80007fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000802:	81a3      	strh	r3, [r4, #12]
 8000804:	4632      	mov	r2, r6
 8000806:	463b      	mov	r3, r7
 8000808:	4628      	mov	r0, r5
 800080a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800080e:	f000 b853 	b.w	80008b8 <_write_r>

08000812 <__sseek>:
 8000812:	b510      	push	{r4, lr}
 8000814:	460c      	mov	r4, r1
 8000816:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800081a:	f000 f829 	bl	8000870 <_lseek_r>
 800081e:	1c43      	adds	r3, r0, #1
 8000820:	89a3      	ldrh	r3, [r4, #12]
 8000822:	bf15      	itete	ne
 8000824:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000826:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800082a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800082e:	81a3      	strheq	r3, [r4, #12]
 8000830:	bf18      	it	ne
 8000832:	81a3      	strhne	r3, [r4, #12]
 8000834:	bd10      	pop	{r4, pc}

08000836 <__sclose>:
 8000836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800083a:	f000 b809 	b.w	8000850 <_close_r>

0800083e <memset>:
 800083e:	4402      	add	r2, r0
 8000840:	4603      	mov	r3, r0
 8000842:	4293      	cmp	r3, r2
 8000844:	d100      	bne.n	8000848 <memset+0xa>
 8000846:	4770      	bx	lr
 8000848:	f803 1b01 	strb.w	r1, [r3], #1
 800084c:	e7f9      	b.n	8000842 <memset+0x4>
	...

08000850 <_close_r>:
 8000850:	b538      	push	{r3, r4, r5, lr}
 8000852:	4d06      	ldr	r5, [pc, #24]	@ (800086c <_close_r+0x1c>)
 8000854:	2300      	movs	r3, #0
 8000856:	4604      	mov	r4, r0
 8000858:	4608      	mov	r0, r1
 800085a:	602b      	str	r3, [r5, #0]
 800085c:	f7ff fdb3 	bl	80003c6 <_close>
 8000860:	1c43      	adds	r3, r0, #1
 8000862:	d102      	bne.n	800086a <_close_r+0x1a>
 8000864:	682b      	ldr	r3, [r5, #0]
 8000866:	b103      	cbz	r3, 800086a <_close_r+0x1a>
 8000868:	6023      	str	r3, [r4, #0]
 800086a:	bd38      	pop	{r3, r4, r5, pc}
 800086c:	200001b8 	.word	0x200001b8

08000870 <_lseek_r>:
 8000870:	b538      	push	{r3, r4, r5, lr}
 8000872:	4d07      	ldr	r5, [pc, #28]	@ (8000890 <_lseek_r+0x20>)
 8000874:	4604      	mov	r4, r0
 8000876:	4608      	mov	r0, r1
 8000878:	4611      	mov	r1, r2
 800087a:	2200      	movs	r2, #0
 800087c:	602a      	str	r2, [r5, #0]
 800087e:	461a      	mov	r2, r3
 8000880:	f7ff fdc8 	bl	8000414 <_lseek>
 8000884:	1c43      	adds	r3, r0, #1
 8000886:	d102      	bne.n	800088e <_lseek_r+0x1e>
 8000888:	682b      	ldr	r3, [r5, #0]
 800088a:	b103      	cbz	r3, 800088e <_lseek_r+0x1e>
 800088c:	6023      	str	r3, [r4, #0]
 800088e:	bd38      	pop	{r3, r4, r5, pc}
 8000890:	200001b8 	.word	0x200001b8

08000894 <_read_r>:
 8000894:	b538      	push	{r3, r4, r5, lr}
 8000896:	4d07      	ldr	r5, [pc, #28]	@ (80008b4 <_read_r+0x20>)
 8000898:	4604      	mov	r4, r0
 800089a:	4608      	mov	r0, r1
 800089c:	4611      	mov	r1, r2
 800089e:	2200      	movs	r2, #0
 80008a0:	602a      	str	r2, [r5, #0]
 80008a2:	461a      	mov	r2, r3
 80008a4:	f7ff fd56 	bl	8000354 <_read>
 80008a8:	1c43      	adds	r3, r0, #1
 80008aa:	d102      	bne.n	80008b2 <_read_r+0x1e>
 80008ac:	682b      	ldr	r3, [r5, #0]
 80008ae:	b103      	cbz	r3, 80008b2 <_read_r+0x1e>
 80008b0:	6023      	str	r3, [r4, #0]
 80008b2:	bd38      	pop	{r3, r4, r5, pc}
 80008b4:	200001b8 	.word	0x200001b8

080008b8 <_write_r>:
 80008b8:	b538      	push	{r3, r4, r5, lr}
 80008ba:	4d07      	ldr	r5, [pc, #28]	@ (80008d8 <_write_r+0x20>)
 80008bc:	4604      	mov	r4, r0
 80008be:	4608      	mov	r0, r1
 80008c0:	4611      	mov	r1, r2
 80008c2:	2200      	movs	r2, #0
 80008c4:	602a      	str	r2, [r5, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	f7ff fd61 	bl	800038e <_write>
 80008cc:	1c43      	adds	r3, r0, #1
 80008ce:	d102      	bne.n	80008d6 <_write_r+0x1e>
 80008d0:	682b      	ldr	r3, [r5, #0]
 80008d2:	b103      	cbz	r3, 80008d6 <_write_r+0x1e>
 80008d4:	6023      	str	r3, [r4, #0]
 80008d6:	bd38      	pop	{r3, r4, r5, pc}
 80008d8:	200001b8 	.word	0x200001b8

080008dc <__errno>:
 80008dc:	4b01      	ldr	r3, [pc, #4]	@ (80008e4 <__errno+0x8>)
 80008de:	6818      	ldr	r0, [r3, #0]
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	2000000c 	.word	0x2000000c

080008e8 <__libc_init_array>:
 80008e8:	b570      	push	{r4, r5, r6, lr}
 80008ea:	4d0d      	ldr	r5, [pc, #52]	@ (8000920 <__libc_init_array+0x38>)
 80008ec:	4c0d      	ldr	r4, [pc, #52]	@ (8000924 <__libc_init_array+0x3c>)
 80008ee:	1b64      	subs	r4, r4, r5
 80008f0:	10a4      	asrs	r4, r4, #2
 80008f2:	2600      	movs	r6, #0
 80008f4:	42a6      	cmp	r6, r4
 80008f6:	d109      	bne.n	800090c <__libc_init_array+0x24>
 80008f8:	4d0b      	ldr	r5, [pc, #44]	@ (8000928 <__libc_init_array+0x40>)
 80008fa:	4c0c      	ldr	r4, [pc, #48]	@ (800092c <__libc_init_array+0x44>)
 80008fc:	f000 fdb6 	bl	800146c <_init>
 8000900:	1b64      	subs	r4, r4, r5
 8000902:	10a4      	asrs	r4, r4, #2
 8000904:	2600      	movs	r6, #0
 8000906:	42a6      	cmp	r6, r4
 8000908:	d105      	bne.n	8000916 <__libc_init_array+0x2e>
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000910:	4798      	blx	r3
 8000912:	3601      	adds	r6, #1
 8000914:	e7ee      	b.n	80008f4 <__libc_init_array+0xc>
 8000916:	f855 3b04 	ldr.w	r3, [r5], #4
 800091a:	4798      	blx	r3
 800091c:	3601      	adds	r6, #1
 800091e:	e7f2      	b.n	8000906 <__libc_init_array+0x1e>
 8000920:	080014d0 	.word	0x080014d0
 8000924:	080014d0 	.word	0x080014d0
 8000928:	080014d0 	.word	0x080014d0
 800092c:	080014d4 	.word	0x080014d4

08000930 <__retarget_lock_init_recursive>:
 8000930:	4770      	bx	lr

08000932 <__retarget_lock_acquire_recursive>:
 8000932:	4770      	bx	lr

08000934 <__retarget_lock_release_recursive>:
 8000934:	4770      	bx	lr
	...

08000938 <_free_r>:
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	4605      	mov	r5, r0
 800093c:	2900      	cmp	r1, #0
 800093e:	d041      	beq.n	80009c4 <_free_r+0x8c>
 8000940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000944:	1f0c      	subs	r4, r1, #4
 8000946:	2b00      	cmp	r3, #0
 8000948:	bfb8      	it	lt
 800094a:	18e4      	addlt	r4, r4, r3
 800094c:	f000 f8e0 	bl	8000b10 <__malloc_lock>
 8000950:	4a1d      	ldr	r2, [pc, #116]	@ (80009c8 <_free_r+0x90>)
 8000952:	6813      	ldr	r3, [r2, #0]
 8000954:	b933      	cbnz	r3, 8000964 <_free_r+0x2c>
 8000956:	6063      	str	r3, [r4, #4]
 8000958:	6014      	str	r4, [r2, #0]
 800095a:	4628      	mov	r0, r5
 800095c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000960:	f000 b8dc 	b.w	8000b1c <__malloc_unlock>
 8000964:	42a3      	cmp	r3, r4
 8000966:	d908      	bls.n	800097a <_free_r+0x42>
 8000968:	6820      	ldr	r0, [r4, #0]
 800096a:	1821      	adds	r1, r4, r0
 800096c:	428b      	cmp	r3, r1
 800096e:	bf01      	itttt	eq
 8000970:	6819      	ldreq	r1, [r3, #0]
 8000972:	685b      	ldreq	r3, [r3, #4]
 8000974:	1809      	addeq	r1, r1, r0
 8000976:	6021      	streq	r1, [r4, #0]
 8000978:	e7ed      	b.n	8000956 <_free_r+0x1e>
 800097a:	461a      	mov	r2, r3
 800097c:	685b      	ldr	r3, [r3, #4]
 800097e:	b10b      	cbz	r3, 8000984 <_free_r+0x4c>
 8000980:	42a3      	cmp	r3, r4
 8000982:	d9fa      	bls.n	800097a <_free_r+0x42>
 8000984:	6811      	ldr	r1, [r2, #0]
 8000986:	1850      	adds	r0, r2, r1
 8000988:	42a0      	cmp	r0, r4
 800098a:	d10b      	bne.n	80009a4 <_free_r+0x6c>
 800098c:	6820      	ldr	r0, [r4, #0]
 800098e:	4401      	add	r1, r0
 8000990:	1850      	adds	r0, r2, r1
 8000992:	4283      	cmp	r3, r0
 8000994:	6011      	str	r1, [r2, #0]
 8000996:	d1e0      	bne.n	800095a <_free_r+0x22>
 8000998:	6818      	ldr	r0, [r3, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	6053      	str	r3, [r2, #4]
 800099e:	4408      	add	r0, r1
 80009a0:	6010      	str	r0, [r2, #0]
 80009a2:	e7da      	b.n	800095a <_free_r+0x22>
 80009a4:	d902      	bls.n	80009ac <_free_r+0x74>
 80009a6:	230c      	movs	r3, #12
 80009a8:	602b      	str	r3, [r5, #0]
 80009aa:	e7d6      	b.n	800095a <_free_r+0x22>
 80009ac:	6820      	ldr	r0, [r4, #0]
 80009ae:	1821      	adds	r1, r4, r0
 80009b0:	428b      	cmp	r3, r1
 80009b2:	bf04      	itt	eq
 80009b4:	6819      	ldreq	r1, [r3, #0]
 80009b6:	685b      	ldreq	r3, [r3, #4]
 80009b8:	6063      	str	r3, [r4, #4]
 80009ba:	bf04      	itt	eq
 80009bc:	1809      	addeq	r1, r1, r0
 80009be:	6021      	streq	r1, [r4, #0]
 80009c0:	6054      	str	r4, [r2, #4]
 80009c2:	e7ca      	b.n	800095a <_free_r+0x22>
 80009c4:	bd38      	pop	{r3, r4, r5, pc}
 80009c6:	bf00      	nop
 80009c8:	200001c4 	.word	0x200001c4

080009cc <sbrk_aligned>:
 80009cc:	b570      	push	{r4, r5, r6, lr}
 80009ce:	4e0f      	ldr	r6, [pc, #60]	@ (8000a0c <sbrk_aligned+0x40>)
 80009d0:	460c      	mov	r4, r1
 80009d2:	6831      	ldr	r1, [r6, #0]
 80009d4:	4605      	mov	r5, r0
 80009d6:	b911      	cbnz	r1, 80009de <sbrk_aligned+0x12>
 80009d8:	f000 fcb4 	bl	8001344 <_sbrk_r>
 80009dc:	6030      	str	r0, [r6, #0]
 80009de:	4621      	mov	r1, r4
 80009e0:	4628      	mov	r0, r5
 80009e2:	f000 fcaf 	bl	8001344 <_sbrk_r>
 80009e6:	1c43      	adds	r3, r0, #1
 80009e8:	d103      	bne.n	80009f2 <sbrk_aligned+0x26>
 80009ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80009ee:	4620      	mov	r0, r4
 80009f0:	bd70      	pop	{r4, r5, r6, pc}
 80009f2:	1cc4      	adds	r4, r0, #3
 80009f4:	f024 0403 	bic.w	r4, r4, #3
 80009f8:	42a0      	cmp	r0, r4
 80009fa:	d0f8      	beq.n	80009ee <sbrk_aligned+0x22>
 80009fc:	1a21      	subs	r1, r4, r0
 80009fe:	4628      	mov	r0, r5
 8000a00:	f000 fca0 	bl	8001344 <_sbrk_r>
 8000a04:	3001      	adds	r0, #1
 8000a06:	d1f2      	bne.n	80009ee <sbrk_aligned+0x22>
 8000a08:	e7ef      	b.n	80009ea <sbrk_aligned+0x1e>
 8000a0a:	bf00      	nop
 8000a0c:	200001c0 	.word	0x200001c0

08000a10 <_malloc_r>:
 8000a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a14:	1ccd      	adds	r5, r1, #3
 8000a16:	f025 0503 	bic.w	r5, r5, #3
 8000a1a:	3508      	adds	r5, #8
 8000a1c:	2d0c      	cmp	r5, #12
 8000a1e:	bf38      	it	cc
 8000a20:	250c      	movcc	r5, #12
 8000a22:	2d00      	cmp	r5, #0
 8000a24:	4606      	mov	r6, r0
 8000a26:	db01      	blt.n	8000a2c <_malloc_r+0x1c>
 8000a28:	42a9      	cmp	r1, r5
 8000a2a:	d904      	bls.n	8000a36 <_malloc_r+0x26>
 8000a2c:	230c      	movs	r3, #12
 8000a2e:	6033      	str	r3, [r6, #0]
 8000a30:	2000      	movs	r0, #0
 8000a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a36:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b0c <_malloc_r+0xfc>
 8000a3a:	f000 f869 	bl	8000b10 <__malloc_lock>
 8000a3e:	f8d8 3000 	ldr.w	r3, [r8]
 8000a42:	461c      	mov	r4, r3
 8000a44:	bb44      	cbnz	r4, 8000a98 <_malloc_r+0x88>
 8000a46:	4629      	mov	r1, r5
 8000a48:	4630      	mov	r0, r6
 8000a4a:	f7ff ffbf 	bl	80009cc <sbrk_aligned>
 8000a4e:	1c43      	adds	r3, r0, #1
 8000a50:	4604      	mov	r4, r0
 8000a52:	d158      	bne.n	8000b06 <_malloc_r+0xf6>
 8000a54:	f8d8 4000 	ldr.w	r4, [r8]
 8000a58:	4627      	mov	r7, r4
 8000a5a:	2f00      	cmp	r7, #0
 8000a5c:	d143      	bne.n	8000ae6 <_malloc_r+0xd6>
 8000a5e:	2c00      	cmp	r4, #0
 8000a60:	d04b      	beq.n	8000afa <_malloc_r+0xea>
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	4639      	mov	r1, r7
 8000a66:	4630      	mov	r0, r6
 8000a68:	eb04 0903 	add.w	r9, r4, r3
 8000a6c:	f000 fc6a 	bl	8001344 <_sbrk_r>
 8000a70:	4581      	cmp	r9, r0
 8000a72:	d142      	bne.n	8000afa <_malloc_r+0xea>
 8000a74:	6821      	ldr	r1, [r4, #0]
 8000a76:	1a6d      	subs	r5, r5, r1
 8000a78:	4629      	mov	r1, r5
 8000a7a:	4630      	mov	r0, r6
 8000a7c:	f7ff ffa6 	bl	80009cc <sbrk_aligned>
 8000a80:	3001      	adds	r0, #1
 8000a82:	d03a      	beq.n	8000afa <_malloc_r+0xea>
 8000a84:	6823      	ldr	r3, [r4, #0]
 8000a86:	442b      	add	r3, r5
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	f8d8 3000 	ldr.w	r3, [r8]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	bb62      	cbnz	r2, 8000aec <_malloc_r+0xdc>
 8000a92:	f8c8 7000 	str.w	r7, [r8]
 8000a96:	e00f      	b.n	8000ab8 <_malloc_r+0xa8>
 8000a98:	6822      	ldr	r2, [r4, #0]
 8000a9a:	1b52      	subs	r2, r2, r5
 8000a9c:	d420      	bmi.n	8000ae0 <_malloc_r+0xd0>
 8000a9e:	2a0b      	cmp	r2, #11
 8000aa0:	d917      	bls.n	8000ad2 <_malloc_r+0xc2>
 8000aa2:	1961      	adds	r1, r4, r5
 8000aa4:	42a3      	cmp	r3, r4
 8000aa6:	6025      	str	r5, [r4, #0]
 8000aa8:	bf18      	it	ne
 8000aaa:	6059      	strne	r1, [r3, #4]
 8000aac:	6863      	ldr	r3, [r4, #4]
 8000aae:	bf08      	it	eq
 8000ab0:	f8c8 1000 	streq.w	r1, [r8]
 8000ab4:	5162      	str	r2, [r4, r5]
 8000ab6:	604b      	str	r3, [r1, #4]
 8000ab8:	4630      	mov	r0, r6
 8000aba:	f000 f82f 	bl	8000b1c <__malloc_unlock>
 8000abe:	f104 000b 	add.w	r0, r4, #11
 8000ac2:	1d23      	adds	r3, r4, #4
 8000ac4:	f020 0007 	bic.w	r0, r0, #7
 8000ac8:	1ac2      	subs	r2, r0, r3
 8000aca:	bf1c      	itt	ne
 8000acc:	1a1b      	subne	r3, r3, r0
 8000ace:	50a3      	strne	r3, [r4, r2]
 8000ad0:	e7af      	b.n	8000a32 <_malloc_r+0x22>
 8000ad2:	6862      	ldr	r2, [r4, #4]
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	bf0c      	ite	eq
 8000ad8:	f8c8 2000 	streq.w	r2, [r8]
 8000adc:	605a      	strne	r2, [r3, #4]
 8000ade:	e7eb      	b.n	8000ab8 <_malloc_r+0xa8>
 8000ae0:	4623      	mov	r3, r4
 8000ae2:	6864      	ldr	r4, [r4, #4]
 8000ae4:	e7ae      	b.n	8000a44 <_malloc_r+0x34>
 8000ae6:	463c      	mov	r4, r7
 8000ae8:	687f      	ldr	r7, [r7, #4]
 8000aea:	e7b6      	b.n	8000a5a <_malloc_r+0x4a>
 8000aec:	461a      	mov	r2, r3
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	d1fb      	bne.n	8000aec <_malloc_r+0xdc>
 8000af4:	2300      	movs	r3, #0
 8000af6:	6053      	str	r3, [r2, #4]
 8000af8:	e7de      	b.n	8000ab8 <_malloc_r+0xa8>
 8000afa:	230c      	movs	r3, #12
 8000afc:	6033      	str	r3, [r6, #0]
 8000afe:	4630      	mov	r0, r6
 8000b00:	f000 f80c 	bl	8000b1c <__malloc_unlock>
 8000b04:	e794      	b.n	8000a30 <_malloc_r+0x20>
 8000b06:	6005      	str	r5, [r0, #0]
 8000b08:	e7d6      	b.n	8000ab8 <_malloc_r+0xa8>
 8000b0a:	bf00      	nop
 8000b0c:	200001c4 	.word	0x200001c4

08000b10 <__malloc_lock>:
 8000b10:	4801      	ldr	r0, [pc, #4]	@ (8000b18 <__malloc_lock+0x8>)
 8000b12:	f7ff bf0e 	b.w	8000932 <__retarget_lock_acquire_recursive>
 8000b16:	bf00      	nop
 8000b18:	200001bc 	.word	0x200001bc

08000b1c <__malloc_unlock>:
 8000b1c:	4801      	ldr	r0, [pc, #4]	@ (8000b24 <__malloc_unlock+0x8>)
 8000b1e:	f7ff bf09 	b.w	8000934 <__retarget_lock_release_recursive>
 8000b22:	bf00      	nop
 8000b24:	200001bc 	.word	0x200001bc

08000b28 <__sfputc_r>:
 8000b28:	6893      	ldr	r3, [r2, #8]
 8000b2a:	3b01      	subs	r3, #1
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	b410      	push	{r4}
 8000b30:	6093      	str	r3, [r2, #8]
 8000b32:	da08      	bge.n	8000b46 <__sfputc_r+0x1e>
 8000b34:	6994      	ldr	r4, [r2, #24]
 8000b36:	42a3      	cmp	r3, r4
 8000b38:	db01      	blt.n	8000b3e <__sfputc_r+0x16>
 8000b3a:	290a      	cmp	r1, #10
 8000b3c:	d103      	bne.n	8000b46 <__sfputc_r+0x1e>
 8000b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b42:	f000 bb6b 	b.w	800121c <__swbuf_r>
 8000b46:	6813      	ldr	r3, [r2, #0]
 8000b48:	1c58      	adds	r0, r3, #1
 8000b4a:	6010      	str	r0, [r2, #0]
 8000b4c:	7019      	strb	r1, [r3, #0]
 8000b4e:	4608      	mov	r0, r1
 8000b50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <__sfputs_r>:
 8000b56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b58:	4606      	mov	r6, r0
 8000b5a:	460f      	mov	r7, r1
 8000b5c:	4614      	mov	r4, r2
 8000b5e:	18d5      	adds	r5, r2, r3
 8000b60:	42ac      	cmp	r4, r5
 8000b62:	d101      	bne.n	8000b68 <__sfputs_r+0x12>
 8000b64:	2000      	movs	r0, #0
 8000b66:	e007      	b.n	8000b78 <__sfputs_r+0x22>
 8000b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6c:	463a      	mov	r2, r7
 8000b6e:	4630      	mov	r0, r6
 8000b70:	f7ff ffda 	bl	8000b28 <__sfputc_r>
 8000b74:	1c43      	adds	r3, r0, #1
 8000b76:	d1f3      	bne.n	8000b60 <__sfputs_r+0xa>
 8000b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b7c <_vfiprintf_r>:
 8000b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b80:	460d      	mov	r5, r1
 8000b82:	b09d      	sub	sp, #116	@ 0x74
 8000b84:	4614      	mov	r4, r2
 8000b86:	4698      	mov	r8, r3
 8000b88:	4606      	mov	r6, r0
 8000b8a:	b118      	cbz	r0, 8000b94 <_vfiprintf_r+0x18>
 8000b8c:	6a03      	ldr	r3, [r0, #32]
 8000b8e:	b90b      	cbnz	r3, 8000b94 <_vfiprintf_r+0x18>
 8000b90:	f7ff fdca 	bl	8000728 <__sinit>
 8000b94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b96:	07d9      	lsls	r1, r3, #31
 8000b98:	d405      	bmi.n	8000ba6 <_vfiprintf_r+0x2a>
 8000b9a:	89ab      	ldrh	r3, [r5, #12]
 8000b9c:	059a      	lsls	r2, r3, #22
 8000b9e:	d402      	bmi.n	8000ba6 <_vfiprintf_r+0x2a>
 8000ba0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000ba2:	f7ff fec6 	bl	8000932 <__retarget_lock_acquire_recursive>
 8000ba6:	89ab      	ldrh	r3, [r5, #12]
 8000ba8:	071b      	lsls	r3, r3, #28
 8000baa:	d501      	bpl.n	8000bb0 <_vfiprintf_r+0x34>
 8000bac:	692b      	ldr	r3, [r5, #16]
 8000bae:	b99b      	cbnz	r3, 8000bd8 <_vfiprintf_r+0x5c>
 8000bb0:	4629      	mov	r1, r5
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	f000 fb70 	bl	8001298 <__swsetup_r>
 8000bb8:	b170      	cbz	r0, 8000bd8 <_vfiprintf_r+0x5c>
 8000bba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000bbc:	07dc      	lsls	r4, r3, #31
 8000bbe:	d504      	bpl.n	8000bca <_vfiprintf_r+0x4e>
 8000bc0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bc4:	b01d      	add	sp, #116	@ 0x74
 8000bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bca:	89ab      	ldrh	r3, [r5, #12]
 8000bcc:	0598      	lsls	r0, r3, #22
 8000bce:	d4f7      	bmi.n	8000bc0 <_vfiprintf_r+0x44>
 8000bd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000bd2:	f7ff feaf 	bl	8000934 <__retarget_lock_release_recursive>
 8000bd6:	e7f3      	b.n	8000bc0 <_vfiprintf_r+0x44>
 8000bd8:	2300      	movs	r3, #0
 8000bda:	9309      	str	r3, [sp, #36]	@ 0x24
 8000bdc:	2320      	movs	r3, #32
 8000bde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000be2:	f8cd 800c 	str.w	r8, [sp, #12]
 8000be6:	2330      	movs	r3, #48	@ 0x30
 8000be8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000d98 <_vfiprintf_r+0x21c>
 8000bec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000bf0:	f04f 0901 	mov.w	r9, #1
 8000bf4:	4623      	mov	r3, r4
 8000bf6:	469a      	mov	sl, r3
 8000bf8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bfc:	b10a      	cbz	r2, 8000c02 <_vfiprintf_r+0x86>
 8000bfe:	2a25      	cmp	r2, #37	@ 0x25
 8000c00:	d1f9      	bne.n	8000bf6 <_vfiprintf_r+0x7a>
 8000c02:	ebba 0b04 	subs.w	fp, sl, r4
 8000c06:	d00b      	beq.n	8000c20 <_vfiprintf_r+0xa4>
 8000c08:	465b      	mov	r3, fp
 8000c0a:	4622      	mov	r2, r4
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	4630      	mov	r0, r6
 8000c10:	f7ff ffa1 	bl	8000b56 <__sfputs_r>
 8000c14:	3001      	adds	r0, #1
 8000c16:	f000 80a7 	beq.w	8000d68 <_vfiprintf_r+0x1ec>
 8000c1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000c1c:	445a      	add	r2, fp
 8000c1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8000c20:	f89a 3000 	ldrb.w	r3, [sl]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f000 809f 	beq.w	8000d68 <_vfiprintf_r+0x1ec>
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c34:	f10a 0a01 	add.w	sl, sl, #1
 8000c38:	9304      	str	r3, [sp, #16]
 8000c3a:	9307      	str	r3, [sp, #28]
 8000c3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000c40:	931a      	str	r3, [sp, #104]	@ 0x68
 8000c42:	4654      	mov	r4, sl
 8000c44:	2205      	movs	r2, #5
 8000c46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c4a:	4853      	ldr	r0, [pc, #332]	@ (8000d98 <_vfiprintf_r+0x21c>)
 8000c4c:	f7ff fac8 	bl	80001e0 <memchr>
 8000c50:	9a04      	ldr	r2, [sp, #16]
 8000c52:	b9d8      	cbnz	r0, 8000c8c <_vfiprintf_r+0x110>
 8000c54:	06d1      	lsls	r1, r2, #27
 8000c56:	bf44      	itt	mi
 8000c58:	2320      	movmi	r3, #32
 8000c5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c5e:	0713      	lsls	r3, r2, #28
 8000c60:	bf44      	itt	mi
 8000c62:	232b      	movmi	r3, #43	@ 0x2b
 8000c64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c68:	f89a 3000 	ldrb.w	r3, [sl]
 8000c6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c6e:	d015      	beq.n	8000c9c <_vfiprintf_r+0x120>
 8000c70:	9a07      	ldr	r2, [sp, #28]
 8000c72:	4654      	mov	r4, sl
 8000c74:	2000      	movs	r0, #0
 8000c76:	f04f 0c0a 	mov.w	ip, #10
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c80:	3b30      	subs	r3, #48	@ 0x30
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	d94b      	bls.n	8000d1e <_vfiprintf_r+0x1a2>
 8000c86:	b1b0      	cbz	r0, 8000cb6 <_vfiprintf_r+0x13a>
 8000c88:	9207      	str	r2, [sp, #28]
 8000c8a:	e014      	b.n	8000cb6 <_vfiprintf_r+0x13a>
 8000c8c:	eba0 0308 	sub.w	r3, r0, r8
 8000c90:	fa09 f303 	lsl.w	r3, r9, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	9304      	str	r3, [sp, #16]
 8000c98:	46a2      	mov	sl, r4
 8000c9a:	e7d2      	b.n	8000c42 <_vfiprintf_r+0xc6>
 8000c9c:	9b03      	ldr	r3, [sp, #12]
 8000c9e:	1d19      	adds	r1, r3, #4
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	9103      	str	r1, [sp, #12]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bfbb      	ittet	lt
 8000ca8:	425b      	neglt	r3, r3
 8000caa:	f042 0202 	orrlt.w	r2, r2, #2
 8000cae:	9307      	strge	r3, [sp, #28]
 8000cb0:	9307      	strlt	r3, [sp, #28]
 8000cb2:	bfb8      	it	lt
 8000cb4:	9204      	strlt	r2, [sp, #16]
 8000cb6:	7823      	ldrb	r3, [r4, #0]
 8000cb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8000cba:	d10a      	bne.n	8000cd2 <_vfiprintf_r+0x156>
 8000cbc:	7863      	ldrb	r3, [r4, #1]
 8000cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8000cc0:	d132      	bne.n	8000d28 <_vfiprintf_r+0x1ac>
 8000cc2:	9b03      	ldr	r3, [sp, #12]
 8000cc4:	1d1a      	adds	r2, r3, #4
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	9203      	str	r2, [sp, #12]
 8000cca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000cce:	3402      	adds	r4, #2
 8000cd0:	9305      	str	r3, [sp, #20]
 8000cd2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000da8 <_vfiprintf_r+0x22c>
 8000cd6:	7821      	ldrb	r1, [r4, #0]
 8000cd8:	2203      	movs	r2, #3
 8000cda:	4650      	mov	r0, sl
 8000cdc:	f7ff fa80 	bl	80001e0 <memchr>
 8000ce0:	b138      	cbz	r0, 8000cf2 <_vfiprintf_r+0x176>
 8000ce2:	9b04      	ldr	r3, [sp, #16]
 8000ce4:	eba0 000a 	sub.w	r0, r0, sl
 8000ce8:	2240      	movs	r2, #64	@ 0x40
 8000cea:	4082      	lsls	r2, r0
 8000cec:	4313      	orrs	r3, r2
 8000cee:	3401      	adds	r4, #1
 8000cf0:	9304      	str	r3, [sp, #16]
 8000cf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf6:	4829      	ldr	r0, [pc, #164]	@ (8000d9c <_vfiprintf_r+0x220>)
 8000cf8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000cfc:	2206      	movs	r2, #6
 8000cfe:	f7ff fa6f 	bl	80001e0 <memchr>
 8000d02:	2800      	cmp	r0, #0
 8000d04:	d03f      	beq.n	8000d86 <_vfiprintf_r+0x20a>
 8000d06:	4b26      	ldr	r3, [pc, #152]	@ (8000da0 <_vfiprintf_r+0x224>)
 8000d08:	bb1b      	cbnz	r3, 8000d52 <_vfiprintf_r+0x1d6>
 8000d0a:	9b03      	ldr	r3, [sp, #12]
 8000d0c:	3307      	adds	r3, #7
 8000d0e:	f023 0307 	bic.w	r3, r3, #7
 8000d12:	3308      	adds	r3, #8
 8000d14:	9303      	str	r3, [sp, #12]
 8000d16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000d18:	443b      	add	r3, r7
 8000d1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d1c:	e76a      	b.n	8000bf4 <_vfiprintf_r+0x78>
 8000d1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d22:	460c      	mov	r4, r1
 8000d24:	2001      	movs	r0, #1
 8000d26:	e7a8      	b.n	8000c7a <_vfiprintf_r+0xfe>
 8000d28:	2300      	movs	r3, #0
 8000d2a:	3401      	adds	r4, #1
 8000d2c:	9305      	str	r3, [sp, #20]
 8000d2e:	4619      	mov	r1, r3
 8000d30:	f04f 0c0a 	mov.w	ip, #10
 8000d34:	4620      	mov	r0, r4
 8000d36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d3a:	3a30      	subs	r2, #48	@ 0x30
 8000d3c:	2a09      	cmp	r2, #9
 8000d3e:	d903      	bls.n	8000d48 <_vfiprintf_r+0x1cc>
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d0c6      	beq.n	8000cd2 <_vfiprintf_r+0x156>
 8000d44:	9105      	str	r1, [sp, #20]
 8000d46:	e7c4      	b.n	8000cd2 <_vfiprintf_r+0x156>
 8000d48:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e7f0      	b.n	8000d34 <_vfiprintf_r+0x1b8>
 8000d52:	ab03      	add	r3, sp, #12
 8000d54:	9300      	str	r3, [sp, #0]
 8000d56:	462a      	mov	r2, r5
 8000d58:	4b12      	ldr	r3, [pc, #72]	@ (8000da4 <_vfiprintf_r+0x228>)
 8000d5a:	a904      	add	r1, sp, #16
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	f3af 8000 	nop.w
 8000d62:	4607      	mov	r7, r0
 8000d64:	1c78      	adds	r0, r7, #1
 8000d66:	d1d6      	bne.n	8000d16 <_vfiprintf_r+0x19a>
 8000d68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d6a:	07d9      	lsls	r1, r3, #31
 8000d6c:	d405      	bmi.n	8000d7a <_vfiprintf_r+0x1fe>
 8000d6e:	89ab      	ldrh	r3, [r5, #12]
 8000d70:	059a      	lsls	r2, r3, #22
 8000d72:	d402      	bmi.n	8000d7a <_vfiprintf_r+0x1fe>
 8000d74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d76:	f7ff fddd 	bl	8000934 <__retarget_lock_release_recursive>
 8000d7a:	89ab      	ldrh	r3, [r5, #12]
 8000d7c:	065b      	lsls	r3, r3, #25
 8000d7e:	f53f af1f 	bmi.w	8000bc0 <_vfiprintf_r+0x44>
 8000d82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d84:	e71e      	b.n	8000bc4 <_vfiprintf_r+0x48>
 8000d86:	ab03      	add	r3, sp, #12
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	462a      	mov	r2, r5
 8000d8c:	4b05      	ldr	r3, [pc, #20]	@ (8000da4 <_vfiprintf_r+0x228>)
 8000d8e:	a904      	add	r1, sp, #16
 8000d90:	4630      	mov	r0, r6
 8000d92:	f000 f879 	bl	8000e88 <_printf_i>
 8000d96:	e7e4      	b.n	8000d62 <_vfiprintf_r+0x1e6>
 8000d98:	08001495 	.word	0x08001495
 8000d9c:	0800149f 	.word	0x0800149f
 8000da0:	00000000 	.word	0x00000000
 8000da4:	08000b57 	.word	0x08000b57
 8000da8:	0800149b 	.word	0x0800149b

08000dac <_printf_common>:
 8000dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db0:	4616      	mov	r6, r2
 8000db2:	4698      	mov	r8, r3
 8000db4:	688a      	ldr	r2, [r1, #8]
 8000db6:	690b      	ldr	r3, [r1, #16]
 8000db8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	bfb8      	it	lt
 8000dc0:	4613      	movlt	r3, r2
 8000dc2:	6033      	str	r3, [r6, #0]
 8000dc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000dc8:	4607      	mov	r7, r0
 8000dca:	460c      	mov	r4, r1
 8000dcc:	b10a      	cbz	r2, 8000dd2 <_printf_common+0x26>
 8000dce:	3301      	adds	r3, #1
 8000dd0:	6033      	str	r3, [r6, #0]
 8000dd2:	6823      	ldr	r3, [r4, #0]
 8000dd4:	0699      	lsls	r1, r3, #26
 8000dd6:	bf42      	ittt	mi
 8000dd8:	6833      	ldrmi	r3, [r6, #0]
 8000dda:	3302      	addmi	r3, #2
 8000ddc:	6033      	strmi	r3, [r6, #0]
 8000dde:	6825      	ldr	r5, [r4, #0]
 8000de0:	f015 0506 	ands.w	r5, r5, #6
 8000de4:	d106      	bne.n	8000df4 <_printf_common+0x48>
 8000de6:	f104 0a19 	add.w	sl, r4, #25
 8000dea:	68e3      	ldr	r3, [r4, #12]
 8000dec:	6832      	ldr	r2, [r6, #0]
 8000dee:	1a9b      	subs	r3, r3, r2
 8000df0:	42ab      	cmp	r3, r5
 8000df2:	dc26      	bgt.n	8000e42 <_printf_common+0x96>
 8000df4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000df8:	6822      	ldr	r2, [r4, #0]
 8000dfa:	3b00      	subs	r3, #0
 8000dfc:	bf18      	it	ne
 8000dfe:	2301      	movne	r3, #1
 8000e00:	0692      	lsls	r2, r2, #26
 8000e02:	d42b      	bmi.n	8000e5c <_printf_common+0xb0>
 8000e04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000e08:	4641      	mov	r1, r8
 8000e0a:	4638      	mov	r0, r7
 8000e0c:	47c8      	blx	r9
 8000e0e:	3001      	adds	r0, #1
 8000e10:	d01e      	beq.n	8000e50 <_printf_common+0xa4>
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	6922      	ldr	r2, [r4, #16]
 8000e16:	f003 0306 	and.w	r3, r3, #6
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf02      	ittt	eq
 8000e1e:	68e5      	ldreq	r5, [r4, #12]
 8000e20:	6833      	ldreq	r3, [r6, #0]
 8000e22:	1aed      	subeq	r5, r5, r3
 8000e24:	68a3      	ldr	r3, [r4, #8]
 8000e26:	bf0c      	ite	eq
 8000e28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e2c:	2500      	movne	r5, #0
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	bfc4      	itt	gt
 8000e32:	1a9b      	subgt	r3, r3, r2
 8000e34:	18ed      	addgt	r5, r5, r3
 8000e36:	2600      	movs	r6, #0
 8000e38:	341a      	adds	r4, #26
 8000e3a:	42b5      	cmp	r5, r6
 8000e3c:	d11a      	bne.n	8000e74 <_printf_common+0xc8>
 8000e3e:	2000      	movs	r0, #0
 8000e40:	e008      	b.n	8000e54 <_printf_common+0xa8>
 8000e42:	2301      	movs	r3, #1
 8000e44:	4652      	mov	r2, sl
 8000e46:	4641      	mov	r1, r8
 8000e48:	4638      	mov	r0, r7
 8000e4a:	47c8      	blx	r9
 8000e4c:	3001      	adds	r0, #1
 8000e4e:	d103      	bne.n	8000e58 <_printf_common+0xac>
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	3501      	adds	r5, #1
 8000e5a:	e7c6      	b.n	8000dea <_printf_common+0x3e>
 8000e5c:	18e1      	adds	r1, r4, r3
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	2030      	movs	r0, #48	@ 0x30
 8000e62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000e66:	4422      	add	r2, r4
 8000e68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000e6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000e70:	3302      	adds	r3, #2
 8000e72:	e7c7      	b.n	8000e04 <_printf_common+0x58>
 8000e74:	2301      	movs	r3, #1
 8000e76:	4622      	mov	r2, r4
 8000e78:	4641      	mov	r1, r8
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	47c8      	blx	r9
 8000e7e:	3001      	adds	r0, #1
 8000e80:	d0e6      	beq.n	8000e50 <_printf_common+0xa4>
 8000e82:	3601      	adds	r6, #1
 8000e84:	e7d9      	b.n	8000e3a <_printf_common+0x8e>
	...

08000e88 <_printf_i>:
 8000e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e8c:	7e0f      	ldrb	r7, [r1, #24]
 8000e8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000e90:	2f78      	cmp	r7, #120	@ 0x78
 8000e92:	4691      	mov	r9, r2
 8000e94:	4680      	mov	r8, r0
 8000e96:	460c      	mov	r4, r1
 8000e98:	469a      	mov	sl, r3
 8000e9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000e9e:	d807      	bhi.n	8000eb0 <_printf_i+0x28>
 8000ea0:	2f62      	cmp	r7, #98	@ 0x62
 8000ea2:	d80a      	bhi.n	8000eba <_printf_i+0x32>
 8000ea4:	2f00      	cmp	r7, #0
 8000ea6:	f000 80d1 	beq.w	800104c <_printf_i+0x1c4>
 8000eaa:	2f58      	cmp	r7, #88	@ 0x58
 8000eac:	f000 80b8 	beq.w	8001020 <_printf_i+0x198>
 8000eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000eb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000eb8:	e03a      	b.n	8000f30 <_printf_i+0xa8>
 8000eba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000ebe:	2b15      	cmp	r3, #21
 8000ec0:	d8f6      	bhi.n	8000eb0 <_printf_i+0x28>
 8000ec2:	a101      	add	r1, pc, #4	@ (adr r1, 8000ec8 <_printf_i+0x40>)
 8000ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ec8:	08000f21 	.word	0x08000f21
 8000ecc:	08000f35 	.word	0x08000f35
 8000ed0:	08000eb1 	.word	0x08000eb1
 8000ed4:	08000eb1 	.word	0x08000eb1
 8000ed8:	08000eb1 	.word	0x08000eb1
 8000edc:	08000eb1 	.word	0x08000eb1
 8000ee0:	08000f35 	.word	0x08000f35
 8000ee4:	08000eb1 	.word	0x08000eb1
 8000ee8:	08000eb1 	.word	0x08000eb1
 8000eec:	08000eb1 	.word	0x08000eb1
 8000ef0:	08000eb1 	.word	0x08000eb1
 8000ef4:	08001033 	.word	0x08001033
 8000ef8:	08000f5f 	.word	0x08000f5f
 8000efc:	08000fed 	.word	0x08000fed
 8000f00:	08000eb1 	.word	0x08000eb1
 8000f04:	08000eb1 	.word	0x08000eb1
 8000f08:	08001055 	.word	0x08001055
 8000f0c:	08000eb1 	.word	0x08000eb1
 8000f10:	08000f5f 	.word	0x08000f5f
 8000f14:	08000eb1 	.word	0x08000eb1
 8000f18:	08000eb1 	.word	0x08000eb1
 8000f1c:	08000ff5 	.word	0x08000ff5
 8000f20:	6833      	ldr	r3, [r6, #0]
 8000f22:	1d1a      	adds	r2, r3, #4
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6032      	str	r2, [r6, #0]
 8000f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000f30:	2301      	movs	r3, #1
 8000f32:	e09c      	b.n	800106e <_printf_i+0x1e6>
 8000f34:	6833      	ldr	r3, [r6, #0]
 8000f36:	6820      	ldr	r0, [r4, #0]
 8000f38:	1d19      	adds	r1, r3, #4
 8000f3a:	6031      	str	r1, [r6, #0]
 8000f3c:	0606      	lsls	r6, r0, #24
 8000f3e:	d501      	bpl.n	8000f44 <_printf_i+0xbc>
 8000f40:	681d      	ldr	r5, [r3, #0]
 8000f42:	e003      	b.n	8000f4c <_printf_i+0xc4>
 8000f44:	0645      	lsls	r5, r0, #25
 8000f46:	d5fb      	bpl.n	8000f40 <_printf_i+0xb8>
 8000f48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000f4c:	2d00      	cmp	r5, #0
 8000f4e:	da03      	bge.n	8000f58 <_printf_i+0xd0>
 8000f50:	232d      	movs	r3, #45	@ 0x2d
 8000f52:	426d      	negs	r5, r5
 8000f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000f58:	4858      	ldr	r0, [pc, #352]	@ (80010bc <_printf_i+0x234>)
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	e011      	b.n	8000f82 <_printf_i+0xfa>
 8000f5e:	6821      	ldr	r1, [r4, #0]
 8000f60:	6833      	ldr	r3, [r6, #0]
 8000f62:	0608      	lsls	r0, r1, #24
 8000f64:	f853 5b04 	ldr.w	r5, [r3], #4
 8000f68:	d402      	bmi.n	8000f70 <_printf_i+0xe8>
 8000f6a:	0649      	lsls	r1, r1, #25
 8000f6c:	bf48      	it	mi
 8000f6e:	b2ad      	uxthmi	r5, r5
 8000f70:	2f6f      	cmp	r7, #111	@ 0x6f
 8000f72:	4852      	ldr	r0, [pc, #328]	@ (80010bc <_printf_i+0x234>)
 8000f74:	6033      	str	r3, [r6, #0]
 8000f76:	bf14      	ite	ne
 8000f78:	230a      	movne	r3, #10
 8000f7a:	2308      	moveq	r3, #8
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000f82:	6866      	ldr	r6, [r4, #4]
 8000f84:	60a6      	str	r6, [r4, #8]
 8000f86:	2e00      	cmp	r6, #0
 8000f88:	db05      	blt.n	8000f96 <_printf_i+0x10e>
 8000f8a:	6821      	ldr	r1, [r4, #0]
 8000f8c:	432e      	orrs	r6, r5
 8000f8e:	f021 0104 	bic.w	r1, r1, #4
 8000f92:	6021      	str	r1, [r4, #0]
 8000f94:	d04b      	beq.n	800102e <_printf_i+0x1a6>
 8000f96:	4616      	mov	r6, r2
 8000f98:	fbb5 f1f3 	udiv	r1, r5, r3
 8000f9c:	fb03 5711 	mls	r7, r3, r1, r5
 8000fa0:	5dc7      	ldrb	r7, [r0, r7]
 8000fa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000fa6:	462f      	mov	r7, r5
 8000fa8:	42bb      	cmp	r3, r7
 8000faa:	460d      	mov	r5, r1
 8000fac:	d9f4      	bls.n	8000f98 <_printf_i+0x110>
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d10b      	bne.n	8000fca <_printf_i+0x142>
 8000fb2:	6823      	ldr	r3, [r4, #0]
 8000fb4:	07df      	lsls	r7, r3, #31
 8000fb6:	d508      	bpl.n	8000fca <_printf_i+0x142>
 8000fb8:	6923      	ldr	r3, [r4, #16]
 8000fba:	6861      	ldr	r1, [r4, #4]
 8000fbc:	4299      	cmp	r1, r3
 8000fbe:	bfde      	ittt	le
 8000fc0:	2330      	movle	r3, #48	@ 0x30
 8000fc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000fc6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000fca:	1b92      	subs	r2, r2, r6
 8000fcc:	6122      	str	r2, [r4, #16]
 8000fce:	f8cd a000 	str.w	sl, [sp]
 8000fd2:	464b      	mov	r3, r9
 8000fd4:	aa03      	add	r2, sp, #12
 8000fd6:	4621      	mov	r1, r4
 8000fd8:	4640      	mov	r0, r8
 8000fda:	f7ff fee7 	bl	8000dac <_printf_common>
 8000fde:	3001      	adds	r0, #1
 8000fe0:	d14a      	bne.n	8001078 <_printf_i+0x1f0>
 8000fe2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fe6:	b004      	add	sp, #16
 8000fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fec:	6823      	ldr	r3, [r4, #0]
 8000fee:	f043 0320 	orr.w	r3, r3, #32
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	4832      	ldr	r0, [pc, #200]	@ (80010c0 <_printf_i+0x238>)
 8000ff6:	2778      	movs	r7, #120	@ 0x78
 8000ff8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	6831      	ldr	r1, [r6, #0]
 8001000:	061f      	lsls	r7, r3, #24
 8001002:	f851 5b04 	ldr.w	r5, [r1], #4
 8001006:	d402      	bmi.n	800100e <_printf_i+0x186>
 8001008:	065f      	lsls	r7, r3, #25
 800100a:	bf48      	it	mi
 800100c:	b2ad      	uxthmi	r5, r5
 800100e:	6031      	str	r1, [r6, #0]
 8001010:	07d9      	lsls	r1, r3, #31
 8001012:	bf44      	itt	mi
 8001014:	f043 0320 	orrmi.w	r3, r3, #32
 8001018:	6023      	strmi	r3, [r4, #0]
 800101a:	b11d      	cbz	r5, 8001024 <_printf_i+0x19c>
 800101c:	2310      	movs	r3, #16
 800101e:	e7ad      	b.n	8000f7c <_printf_i+0xf4>
 8001020:	4826      	ldr	r0, [pc, #152]	@ (80010bc <_printf_i+0x234>)
 8001022:	e7e9      	b.n	8000ff8 <_printf_i+0x170>
 8001024:	6823      	ldr	r3, [r4, #0]
 8001026:	f023 0320 	bic.w	r3, r3, #32
 800102a:	6023      	str	r3, [r4, #0]
 800102c:	e7f6      	b.n	800101c <_printf_i+0x194>
 800102e:	4616      	mov	r6, r2
 8001030:	e7bd      	b.n	8000fae <_printf_i+0x126>
 8001032:	6833      	ldr	r3, [r6, #0]
 8001034:	6825      	ldr	r5, [r4, #0]
 8001036:	6961      	ldr	r1, [r4, #20]
 8001038:	1d18      	adds	r0, r3, #4
 800103a:	6030      	str	r0, [r6, #0]
 800103c:	062e      	lsls	r6, r5, #24
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	d501      	bpl.n	8001046 <_printf_i+0x1be>
 8001042:	6019      	str	r1, [r3, #0]
 8001044:	e002      	b.n	800104c <_printf_i+0x1c4>
 8001046:	0668      	lsls	r0, r5, #25
 8001048:	d5fb      	bpl.n	8001042 <_printf_i+0x1ba>
 800104a:	8019      	strh	r1, [r3, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	6123      	str	r3, [r4, #16]
 8001050:	4616      	mov	r6, r2
 8001052:	e7bc      	b.n	8000fce <_printf_i+0x146>
 8001054:	6833      	ldr	r3, [r6, #0]
 8001056:	1d1a      	adds	r2, r3, #4
 8001058:	6032      	str	r2, [r6, #0]
 800105a:	681e      	ldr	r6, [r3, #0]
 800105c:	6862      	ldr	r2, [r4, #4]
 800105e:	2100      	movs	r1, #0
 8001060:	4630      	mov	r0, r6
 8001062:	f7ff f8bd 	bl	80001e0 <memchr>
 8001066:	b108      	cbz	r0, 800106c <_printf_i+0x1e4>
 8001068:	1b80      	subs	r0, r0, r6
 800106a:	6060      	str	r0, [r4, #4]
 800106c:	6863      	ldr	r3, [r4, #4]
 800106e:	6123      	str	r3, [r4, #16]
 8001070:	2300      	movs	r3, #0
 8001072:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001076:	e7aa      	b.n	8000fce <_printf_i+0x146>
 8001078:	6923      	ldr	r3, [r4, #16]
 800107a:	4632      	mov	r2, r6
 800107c:	4649      	mov	r1, r9
 800107e:	4640      	mov	r0, r8
 8001080:	47d0      	blx	sl
 8001082:	3001      	adds	r0, #1
 8001084:	d0ad      	beq.n	8000fe2 <_printf_i+0x15a>
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	079b      	lsls	r3, r3, #30
 800108a:	d413      	bmi.n	80010b4 <_printf_i+0x22c>
 800108c:	68e0      	ldr	r0, [r4, #12]
 800108e:	9b03      	ldr	r3, [sp, #12]
 8001090:	4298      	cmp	r0, r3
 8001092:	bfb8      	it	lt
 8001094:	4618      	movlt	r0, r3
 8001096:	e7a6      	b.n	8000fe6 <_printf_i+0x15e>
 8001098:	2301      	movs	r3, #1
 800109a:	4632      	mov	r2, r6
 800109c:	4649      	mov	r1, r9
 800109e:	4640      	mov	r0, r8
 80010a0:	47d0      	blx	sl
 80010a2:	3001      	adds	r0, #1
 80010a4:	d09d      	beq.n	8000fe2 <_printf_i+0x15a>
 80010a6:	3501      	adds	r5, #1
 80010a8:	68e3      	ldr	r3, [r4, #12]
 80010aa:	9903      	ldr	r1, [sp, #12]
 80010ac:	1a5b      	subs	r3, r3, r1
 80010ae:	42ab      	cmp	r3, r5
 80010b0:	dcf2      	bgt.n	8001098 <_printf_i+0x210>
 80010b2:	e7eb      	b.n	800108c <_printf_i+0x204>
 80010b4:	2500      	movs	r5, #0
 80010b6:	f104 0619 	add.w	r6, r4, #25
 80010ba:	e7f5      	b.n	80010a8 <_printf_i+0x220>
 80010bc:	080014a6 	.word	0x080014a6
 80010c0:	080014b7 	.word	0x080014b7

080010c4 <__sflush_r>:
 80010c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80010c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010cc:	0716      	lsls	r6, r2, #28
 80010ce:	4605      	mov	r5, r0
 80010d0:	460c      	mov	r4, r1
 80010d2:	d454      	bmi.n	800117e <__sflush_r+0xba>
 80010d4:	684b      	ldr	r3, [r1, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dc02      	bgt.n	80010e0 <__sflush_r+0x1c>
 80010da:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	dd48      	ble.n	8001172 <__sflush_r+0xae>
 80010e0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80010e2:	2e00      	cmp	r6, #0
 80010e4:	d045      	beq.n	8001172 <__sflush_r+0xae>
 80010e6:	2300      	movs	r3, #0
 80010e8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80010ec:	682f      	ldr	r7, [r5, #0]
 80010ee:	6a21      	ldr	r1, [r4, #32]
 80010f0:	602b      	str	r3, [r5, #0]
 80010f2:	d030      	beq.n	8001156 <__sflush_r+0x92>
 80010f4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80010f6:	89a3      	ldrh	r3, [r4, #12]
 80010f8:	0759      	lsls	r1, r3, #29
 80010fa:	d505      	bpl.n	8001108 <__sflush_r+0x44>
 80010fc:	6863      	ldr	r3, [r4, #4]
 80010fe:	1ad2      	subs	r2, r2, r3
 8001100:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001102:	b10b      	cbz	r3, 8001108 <__sflush_r+0x44>
 8001104:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001106:	1ad2      	subs	r2, r2, r3
 8001108:	2300      	movs	r3, #0
 800110a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800110c:	6a21      	ldr	r1, [r4, #32]
 800110e:	4628      	mov	r0, r5
 8001110:	47b0      	blx	r6
 8001112:	1c43      	adds	r3, r0, #1
 8001114:	89a3      	ldrh	r3, [r4, #12]
 8001116:	d106      	bne.n	8001126 <__sflush_r+0x62>
 8001118:	6829      	ldr	r1, [r5, #0]
 800111a:	291d      	cmp	r1, #29
 800111c:	d82b      	bhi.n	8001176 <__sflush_r+0xb2>
 800111e:	4a2a      	ldr	r2, [pc, #168]	@ (80011c8 <__sflush_r+0x104>)
 8001120:	40ca      	lsrs	r2, r1
 8001122:	07d6      	lsls	r6, r2, #31
 8001124:	d527      	bpl.n	8001176 <__sflush_r+0xb2>
 8001126:	2200      	movs	r2, #0
 8001128:	6062      	str	r2, [r4, #4]
 800112a:	04d9      	lsls	r1, r3, #19
 800112c:	6922      	ldr	r2, [r4, #16]
 800112e:	6022      	str	r2, [r4, #0]
 8001130:	d504      	bpl.n	800113c <__sflush_r+0x78>
 8001132:	1c42      	adds	r2, r0, #1
 8001134:	d101      	bne.n	800113a <__sflush_r+0x76>
 8001136:	682b      	ldr	r3, [r5, #0]
 8001138:	b903      	cbnz	r3, 800113c <__sflush_r+0x78>
 800113a:	6560      	str	r0, [r4, #84]	@ 0x54
 800113c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800113e:	602f      	str	r7, [r5, #0]
 8001140:	b1b9      	cbz	r1, 8001172 <__sflush_r+0xae>
 8001142:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001146:	4299      	cmp	r1, r3
 8001148:	d002      	beq.n	8001150 <__sflush_r+0x8c>
 800114a:	4628      	mov	r0, r5
 800114c:	f7ff fbf4 	bl	8000938 <_free_r>
 8001150:	2300      	movs	r3, #0
 8001152:	6363      	str	r3, [r4, #52]	@ 0x34
 8001154:	e00d      	b.n	8001172 <__sflush_r+0xae>
 8001156:	2301      	movs	r3, #1
 8001158:	4628      	mov	r0, r5
 800115a:	47b0      	blx	r6
 800115c:	4602      	mov	r2, r0
 800115e:	1c50      	adds	r0, r2, #1
 8001160:	d1c9      	bne.n	80010f6 <__sflush_r+0x32>
 8001162:	682b      	ldr	r3, [r5, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0c6      	beq.n	80010f6 <__sflush_r+0x32>
 8001168:	2b1d      	cmp	r3, #29
 800116a:	d001      	beq.n	8001170 <__sflush_r+0xac>
 800116c:	2b16      	cmp	r3, #22
 800116e:	d11e      	bne.n	80011ae <__sflush_r+0xea>
 8001170:	602f      	str	r7, [r5, #0]
 8001172:	2000      	movs	r0, #0
 8001174:	e022      	b.n	80011bc <__sflush_r+0xf8>
 8001176:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800117a:	b21b      	sxth	r3, r3
 800117c:	e01b      	b.n	80011b6 <__sflush_r+0xf2>
 800117e:	690f      	ldr	r7, [r1, #16]
 8001180:	2f00      	cmp	r7, #0
 8001182:	d0f6      	beq.n	8001172 <__sflush_r+0xae>
 8001184:	0793      	lsls	r3, r2, #30
 8001186:	680e      	ldr	r6, [r1, #0]
 8001188:	bf08      	it	eq
 800118a:	694b      	ldreq	r3, [r1, #20]
 800118c:	600f      	str	r7, [r1, #0]
 800118e:	bf18      	it	ne
 8001190:	2300      	movne	r3, #0
 8001192:	eba6 0807 	sub.w	r8, r6, r7
 8001196:	608b      	str	r3, [r1, #8]
 8001198:	f1b8 0f00 	cmp.w	r8, #0
 800119c:	dde9      	ble.n	8001172 <__sflush_r+0xae>
 800119e:	6a21      	ldr	r1, [r4, #32]
 80011a0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80011a2:	4643      	mov	r3, r8
 80011a4:	463a      	mov	r2, r7
 80011a6:	4628      	mov	r0, r5
 80011a8:	47b0      	blx	r6
 80011aa:	2800      	cmp	r0, #0
 80011ac:	dc08      	bgt.n	80011c0 <__sflush_r+0xfc>
 80011ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011b6:	81a3      	strh	r3, [r4, #12]
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011c0:	4407      	add	r7, r0
 80011c2:	eba8 0800 	sub.w	r8, r8, r0
 80011c6:	e7e7      	b.n	8001198 <__sflush_r+0xd4>
 80011c8:	20400001 	.word	0x20400001

080011cc <_fflush_r>:
 80011cc:	b538      	push	{r3, r4, r5, lr}
 80011ce:	690b      	ldr	r3, [r1, #16]
 80011d0:	4605      	mov	r5, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	b913      	cbnz	r3, 80011dc <_fflush_r+0x10>
 80011d6:	2500      	movs	r5, #0
 80011d8:	4628      	mov	r0, r5
 80011da:	bd38      	pop	{r3, r4, r5, pc}
 80011dc:	b118      	cbz	r0, 80011e6 <_fflush_r+0x1a>
 80011de:	6a03      	ldr	r3, [r0, #32]
 80011e0:	b90b      	cbnz	r3, 80011e6 <_fflush_r+0x1a>
 80011e2:	f7ff faa1 	bl	8000728 <__sinit>
 80011e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d0f3      	beq.n	80011d6 <_fflush_r+0xa>
 80011ee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80011f0:	07d0      	lsls	r0, r2, #31
 80011f2:	d404      	bmi.n	80011fe <_fflush_r+0x32>
 80011f4:	0599      	lsls	r1, r3, #22
 80011f6:	d402      	bmi.n	80011fe <_fflush_r+0x32>
 80011f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80011fa:	f7ff fb9a 	bl	8000932 <__retarget_lock_acquire_recursive>
 80011fe:	4628      	mov	r0, r5
 8001200:	4621      	mov	r1, r4
 8001202:	f7ff ff5f 	bl	80010c4 <__sflush_r>
 8001206:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001208:	07da      	lsls	r2, r3, #31
 800120a:	4605      	mov	r5, r0
 800120c:	d4e4      	bmi.n	80011d8 <_fflush_r+0xc>
 800120e:	89a3      	ldrh	r3, [r4, #12]
 8001210:	059b      	lsls	r3, r3, #22
 8001212:	d4e1      	bmi.n	80011d8 <_fflush_r+0xc>
 8001214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001216:	f7ff fb8d 	bl	8000934 <__retarget_lock_release_recursive>
 800121a:	e7dd      	b.n	80011d8 <_fflush_r+0xc>

0800121c <__swbuf_r>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	460e      	mov	r6, r1
 8001220:	4614      	mov	r4, r2
 8001222:	4605      	mov	r5, r0
 8001224:	b118      	cbz	r0, 800122e <__swbuf_r+0x12>
 8001226:	6a03      	ldr	r3, [r0, #32]
 8001228:	b90b      	cbnz	r3, 800122e <__swbuf_r+0x12>
 800122a:	f7ff fa7d 	bl	8000728 <__sinit>
 800122e:	69a3      	ldr	r3, [r4, #24]
 8001230:	60a3      	str	r3, [r4, #8]
 8001232:	89a3      	ldrh	r3, [r4, #12]
 8001234:	071a      	lsls	r2, r3, #28
 8001236:	d501      	bpl.n	800123c <__swbuf_r+0x20>
 8001238:	6923      	ldr	r3, [r4, #16]
 800123a:	b943      	cbnz	r3, 800124e <__swbuf_r+0x32>
 800123c:	4621      	mov	r1, r4
 800123e:	4628      	mov	r0, r5
 8001240:	f000 f82a 	bl	8001298 <__swsetup_r>
 8001244:	b118      	cbz	r0, 800124e <__swbuf_r+0x32>
 8001246:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800124a:	4638      	mov	r0, r7
 800124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	6922      	ldr	r2, [r4, #16]
 8001252:	1a98      	subs	r0, r3, r2
 8001254:	6963      	ldr	r3, [r4, #20]
 8001256:	b2f6      	uxtb	r6, r6
 8001258:	4283      	cmp	r3, r0
 800125a:	4637      	mov	r7, r6
 800125c:	dc05      	bgt.n	800126a <__swbuf_r+0x4e>
 800125e:	4621      	mov	r1, r4
 8001260:	4628      	mov	r0, r5
 8001262:	f7ff ffb3 	bl	80011cc <_fflush_r>
 8001266:	2800      	cmp	r0, #0
 8001268:	d1ed      	bne.n	8001246 <__swbuf_r+0x2a>
 800126a:	68a3      	ldr	r3, [r4, #8]
 800126c:	3b01      	subs	r3, #1
 800126e:	60a3      	str	r3, [r4, #8]
 8001270:	6823      	ldr	r3, [r4, #0]
 8001272:	1c5a      	adds	r2, r3, #1
 8001274:	6022      	str	r2, [r4, #0]
 8001276:	701e      	strb	r6, [r3, #0]
 8001278:	6962      	ldr	r2, [r4, #20]
 800127a:	1c43      	adds	r3, r0, #1
 800127c:	429a      	cmp	r2, r3
 800127e:	d004      	beq.n	800128a <__swbuf_r+0x6e>
 8001280:	89a3      	ldrh	r3, [r4, #12]
 8001282:	07db      	lsls	r3, r3, #31
 8001284:	d5e1      	bpl.n	800124a <__swbuf_r+0x2e>
 8001286:	2e0a      	cmp	r6, #10
 8001288:	d1df      	bne.n	800124a <__swbuf_r+0x2e>
 800128a:	4621      	mov	r1, r4
 800128c:	4628      	mov	r0, r5
 800128e:	f7ff ff9d 	bl	80011cc <_fflush_r>
 8001292:	2800      	cmp	r0, #0
 8001294:	d0d9      	beq.n	800124a <__swbuf_r+0x2e>
 8001296:	e7d6      	b.n	8001246 <__swbuf_r+0x2a>

08001298 <__swsetup_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4b29      	ldr	r3, [pc, #164]	@ (8001340 <__swsetup_r+0xa8>)
 800129c:	4605      	mov	r5, r0
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	460c      	mov	r4, r1
 80012a2:	b118      	cbz	r0, 80012ac <__swsetup_r+0x14>
 80012a4:	6a03      	ldr	r3, [r0, #32]
 80012a6:	b90b      	cbnz	r3, 80012ac <__swsetup_r+0x14>
 80012a8:	f7ff fa3e 	bl	8000728 <__sinit>
 80012ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012b0:	0719      	lsls	r1, r3, #28
 80012b2:	d422      	bmi.n	80012fa <__swsetup_r+0x62>
 80012b4:	06da      	lsls	r2, r3, #27
 80012b6:	d407      	bmi.n	80012c8 <__swsetup_r+0x30>
 80012b8:	2209      	movs	r2, #9
 80012ba:	602a      	str	r2, [r5, #0]
 80012bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012c0:	81a3      	strh	r3, [r4, #12]
 80012c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c6:	e033      	b.n	8001330 <__swsetup_r+0x98>
 80012c8:	0758      	lsls	r0, r3, #29
 80012ca:	d512      	bpl.n	80012f2 <__swsetup_r+0x5a>
 80012cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80012ce:	b141      	cbz	r1, 80012e2 <__swsetup_r+0x4a>
 80012d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80012d4:	4299      	cmp	r1, r3
 80012d6:	d002      	beq.n	80012de <__swsetup_r+0x46>
 80012d8:	4628      	mov	r0, r5
 80012da:	f7ff fb2d 	bl	8000938 <_free_r>
 80012de:	2300      	movs	r3, #0
 80012e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80012e8:	81a3      	strh	r3, [r4, #12]
 80012ea:	2300      	movs	r3, #0
 80012ec:	6063      	str	r3, [r4, #4]
 80012ee:	6923      	ldr	r3, [r4, #16]
 80012f0:	6023      	str	r3, [r4, #0]
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	81a3      	strh	r3, [r4, #12]
 80012fa:	6923      	ldr	r3, [r4, #16]
 80012fc:	b94b      	cbnz	r3, 8001312 <__swsetup_r+0x7a>
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001304:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001308:	d003      	beq.n	8001312 <__swsetup_r+0x7a>
 800130a:	4621      	mov	r1, r4
 800130c:	4628      	mov	r0, r5
 800130e:	f000 f84f 	bl	80013b0 <__smakebuf_r>
 8001312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001316:	f013 0201 	ands.w	r2, r3, #1
 800131a:	d00a      	beq.n	8001332 <__swsetup_r+0x9a>
 800131c:	2200      	movs	r2, #0
 800131e:	60a2      	str	r2, [r4, #8]
 8001320:	6962      	ldr	r2, [r4, #20]
 8001322:	4252      	negs	r2, r2
 8001324:	61a2      	str	r2, [r4, #24]
 8001326:	6922      	ldr	r2, [r4, #16]
 8001328:	b942      	cbnz	r2, 800133c <__swsetup_r+0xa4>
 800132a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800132e:	d1c5      	bne.n	80012bc <__swsetup_r+0x24>
 8001330:	bd38      	pop	{r3, r4, r5, pc}
 8001332:	0799      	lsls	r1, r3, #30
 8001334:	bf58      	it	pl
 8001336:	6962      	ldrpl	r2, [r4, #20]
 8001338:	60a2      	str	r2, [r4, #8]
 800133a:	e7f4      	b.n	8001326 <__swsetup_r+0x8e>
 800133c:	2000      	movs	r0, #0
 800133e:	e7f7      	b.n	8001330 <__swsetup_r+0x98>
 8001340:	2000000c 	.word	0x2000000c

08001344 <_sbrk_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4d06      	ldr	r5, [pc, #24]	@ (8001360 <_sbrk_r+0x1c>)
 8001348:	2300      	movs	r3, #0
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	602b      	str	r3, [r5, #0]
 8001350:	f7ff f86e 	bl	8000430 <_sbrk>
 8001354:	1c43      	adds	r3, r0, #1
 8001356:	d102      	bne.n	800135e <_sbrk_r+0x1a>
 8001358:	682b      	ldr	r3, [r5, #0]
 800135a:	b103      	cbz	r3, 800135e <_sbrk_r+0x1a>
 800135c:	6023      	str	r3, [r4, #0]
 800135e:	bd38      	pop	{r3, r4, r5, pc}
 8001360:	200001b8 	.word	0x200001b8

08001364 <__swhatbuf_r>:
 8001364:	b570      	push	{r4, r5, r6, lr}
 8001366:	460c      	mov	r4, r1
 8001368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800136c:	2900      	cmp	r1, #0
 800136e:	b096      	sub	sp, #88	@ 0x58
 8001370:	4615      	mov	r5, r2
 8001372:	461e      	mov	r6, r3
 8001374:	da0d      	bge.n	8001392 <__swhatbuf_r+0x2e>
 8001376:	89a3      	ldrh	r3, [r4, #12]
 8001378:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800137c:	f04f 0100 	mov.w	r1, #0
 8001380:	bf14      	ite	ne
 8001382:	2340      	movne	r3, #64	@ 0x40
 8001384:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001388:	2000      	movs	r0, #0
 800138a:	6031      	str	r1, [r6, #0]
 800138c:	602b      	str	r3, [r5, #0]
 800138e:	b016      	add	sp, #88	@ 0x58
 8001390:	bd70      	pop	{r4, r5, r6, pc}
 8001392:	466a      	mov	r2, sp
 8001394:	f000 f848 	bl	8001428 <_fstat_r>
 8001398:	2800      	cmp	r0, #0
 800139a:	dbec      	blt.n	8001376 <__swhatbuf_r+0x12>
 800139c:	9901      	ldr	r1, [sp, #4]
 800139e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80013a2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80013a6:	4259      	negs	r1, r3
 80013a8:	4159      	adcs	r1, r3
 80013aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ae:	e7eb      	b.n	8001388 <__swhatbuf_r+0x24>

080013b0 <__smakebuf_r>:
 80013b0:	898b      	ldrh	r3, [r1, #12]
 80013b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013b4:	079d      	lsls	r5, r3, #30
 80013b6:	4606      	mov	r6, r0
 80013b8:	460c      	mov	r4, r1
 80013ba:	d507      	bpl.n	80013cc <__smakebuf_r+0x1c>
 80013bc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80013c0:	6023      	str	r3, [r4, #0]
 80013c2:	6123      	str	r3, [r4, #16]
 80013c4:	2301      	movs	r3, #1
 80013c6:	6163      	str	r3, [r4, #20]
 80013c8:	b003      	add	sp, #12
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013cc:	ab01      	add	r3, sp, #4
 80013ce:	466a      	mov	r2, sp
 80013d0:	f7ff ffc8 	bl	8001364 <__swhatbuf_r>
 80013d4:	9f00      	ldr	r7, [sp, #0]
 80013d6:	4605      	mov	r5, r0
 80013d8:	4639      	mov	r1, r7
 80013da:	4630      	mov	r0, r6
 80013dc:	f7ff fb18 	bl	8000a10 <_malloc_r>
 80013e0:	b948      	cbnz	r0, 80013f6 <__smakebuf_r+0x46>
 80013e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013e6:	059a      	lsls	r2, r3, #22
 80013e8:	d4ee      	bmi.n	80013c8 <__smakebuf_r+0x18>
 80013ea:	f023 0303 	bic.w	r3, r3, #3
 80013ee:	f043 0302 	orr.w	r3, r3, #2
 80013f2:	81a3      	strh	r3, [r4, #12]
 80013f4:	e7e2      	b.n	80013bc <__smakebuf_r+0xc>
 80013f6:	89a3      	ldrh	r3, [r4, #12]
 80013f8:	6020      	str	r0, [r4, #0]
 80013fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013fe:	81a3      	strh	r3, [r4, #12]
 8001400:	9b01      	ldr	r3, [sp, #4]
 8001402:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001406:	b15b      	cbz	r3, 8001420 <__smakebuf_r+0x70>
 8001408:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800140c:	4630      	mov	r0, r6
 800140e:	f000 f81d 	bl	800144c <_isatty_r>
 8001412:	b128      	cbz	r0, 8001420 <__smakebuf_r+0x70>
 8001414:	89a3      	ldrh	r3, [r4, #12]
 8001416:	f023 0303 	bic.w	r3, r3, #3
 800141a:	f043 0301 	orr.w	r3, r3, #1
 800141e:	81a3      	strh	r3, [r4, #12]
 8001420:	89a3      	ldrh	r3, [r4, #12]
 8001422:	431d      	orrs	r5, r3
 8001424:	81a5      	strh	r5, [r4, #12]
 8001426:	e7cf      	b.n	80013c8 <__smakebuf_r+0x18>

08001428 <_fstat_r>:
 8001428:	b538      	push	{r3, r4, r5, lr}
 800142a:	4d07      	ldr	r5, [pc, #28]	@ (8001448 <_fstat_r+0x20>)
 800142c:	2300      	movs	r3, #0
 800142e:	4604      	mov	r4, r0
 8001430:	4608      	mov	r0, r1
 8001432:	4611      	mov	r1, r2
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	f7fe ffd2 	bl	80003de <_fstat>
 800143a:	1c43      	adds	r3, r0, #1
 800143c:	d102      	bne.n	8001444 <_fstat_r+0x1c>
 800143e:	682b      	ldr	r3, [r5, #0]
 8001440:	b103      	cbz	r3, 8001444 <_fstat_r+0x1c>
 8001442:	6023      	str	r3, [r4, #0]
 8001444:	bd38      	pop	{r3, r4, r5, pc}
 8001446:	bf00      	nop
 8001448:	200001b8 	.word	0x200001b8

0800144c <_isatty_r>:
 800144c:	b538      	push	{r3, r4, r5, lr}
 800144e:	4d06      	ldr	r5, [pc, #24]	@ (8001468 <_isatty_r+0x1c>)
 8001450:	2300      	movs	r3, #0
 8001452:	4604      	mov	r4, r0
 8001454:	4608      	mov	r0, r1
 8001456:	602b      	str	r3, [r5, #0]
 8001458:	f7fe ffd1 	bl	80003fe <_isatty>
 800145c:	1c43      	adds	r3, r0, #1
 800145e:	d102      	bne.n	8001466 <_isatty_r+0x1a>
 8001460:	682b      	ldr	r3, [r5, #0]
 8001462:	b103      	cbz	r3, 8001466 <_isatty_r+0x1a>
 8001464:	6023      	str	r3, [r4, #0]
 8001466:	bd38      	pop	{r3, r4, r5, pc}
 8001468:	200001b8 	.word	0x200001b8

0800146c <_init>:
 800146c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146e:	bf00      	nop
 8001470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001472:	bc08      	pop	{r3}
 8001474:	469e      	mov	lr, r3
 8001476:	4770      	bx	lr

08001478 <_fini>:
 8001478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800147a:	bf00      	nop
 800147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800147e:	bc08      	pop	{r3}
 8001480:	469e      	mov	lr, r3
 8001482:	4770      	bx	lr
