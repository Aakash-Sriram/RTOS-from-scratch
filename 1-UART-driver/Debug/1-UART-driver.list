
1-UART-driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cfc  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e94  08000e94  00001e94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ea8  08000ea8  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000ea8  08000ea8  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000ea8  08000ea8  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ea8  08000ea8  00001ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000eac  08000eac  00001eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000eb0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  08000f0c  0000205c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  08000f0c  000021c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d50  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000494  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000160  00000000  00000000  00003270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f0  00000000  00000000  000033d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002061  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001a2b  00000000  00000000  00005521  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00055adb  00000000  00000000  00006f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005ca27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000abc  00000000  00000000  0005ca6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0005d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000005c 	.word	0x2000005c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000e7c 	.word	0x08000e7c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000060 	.word	0x20000060
 80001d4:	08000e7c 	.word	0x08000e7c

080001d8 <main>:
#include<stdio.h>
#include"uart.h"
int main(void){
 80001d8:	b580      	push	{r7, lr}
 80001da:	b082      	sub	sp, #8
 80001dc:	af00      	add	r7, sp, #0
	uart_tx_init();
 80001de:	f000 f8f1 	bl	80003c4 <uart_tx_init>
	for(int i=0;i<100000;i++){
 80001e2:	2300      	movs	r3, #0
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	e010      	b.n	800020a <main+0x32>
	printf("Hello from STM32\n");
 80001e8:	480c      	ldr	r0, [pc, #48]	@ (800021c <main+0x44>)
 80001ea:	f000 fab3 	bl	8000754 <puts>
	for(int i=0;i<10000;i++){}
 80001ee:	2300      	movs	r3, #0
 80001f0:	603b      	str	r3, [r7, #0]
 80001f2:	e002      	b.n	80001fa <main+0x22>
 80001f4:	683b      	ldr	r3, [r7, #0]
 80001f6:	3301      	adds	r3, #1
 80001f8:	603b      	str	r3, [r7, #0]
 80001fa:	683b      	ldr	r3, [r7, #0]
 80001fc:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000200:	4293      	cmp	r3, r2
 8000202:	ddf7      	ble.n	80001f4 <main+0x1c>
	for(int i=0;i<100000;i++){
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a04      	ldr	r2, [pc, #16]	@ (8000220 <main+0x48>)
 800020e:	4293      	cmp	r3, r2
 8000210:	ddea      	ble.n	80001e8 <main+0x10>
 8000212:	2300      	movs	r3, #0
	}
}
 8000214:	4618      	mov	r0, r3
 8000216:	3708      	adds	r7, #8
 8000218:	46bd      	mov	sp, r7
 800021a:	bd80      	pop	{r7, pc}
 800021c:	08000e94 	.word	0x08000e94
 8000220:	0001869f 	.word	0x0001869f

08000224 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b086      	sub	sp, #24
 8000228:	af00      	add	r7, sp, #0
 800022a:	60f8      	str	r0, [r7, #12]
 800022c:	60b9      	str	r1, [r7, #8]
 800022e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000230:	2300      	movs	r3, #0
 8000232:	617b      	str	r3, [r7, #20]
 8000234:	e00a      	b.n	800024c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000236:	f000 f8a5 	bl	8000384 <__io_getchar>
 800023a:	4601      	mov	r1, r0
 800023c:	68bb      	ldr	r3, [r7, #8]
 800023e:	1c5a      	adds	r2, r3, #1
 8000240:	60ba      	str	r2, [r7, #8]
 8000242:	b2ca      	uxtb	r2, r1
 8000244:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000246:	697b      	ldr	r3, [r7, #20]
 8000248:	3301      	adds	r3, #1
 800024a:	617b      	str	r3, [r7, #20]
 800024c:	697a      	ldr	r2, [r7, #20]
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	429a      	cmp	r2, r3
 8000252:	dbf0      	blt.n	8000236 <_read+0x12>
  }

  return len;
 8000254:	687b      	ldr	r3, [r7, #4]
}
 8000256:	4618      	mov	r0, r3
 8000258:	3718      	adds	r7, #24
 800025a:	46bd      	mov	sp, r7
 800025c:	bd80      	pop	{r7, pc}

0800025e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800025e:	b580      	push	{r7, lr}
 8000260:	b086      	sub	sp, #24
 8000262:	af00      	add	r7, sp, #0
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026a:	2300      	movs	r3, #0
 800026c:	617b      	str	r3, [r7, #20]
 800026e:	e009      	b.n	8000284 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	1c5a      	adds	r2, r3, #1
 8000274:	60ba      	str	r2, [r7, #8]
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f877 	bl	800036c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027e:	697b      	ldr	r3, [r7, #20]
 8000280:	3301      	adds	r3, #1
 8000282:	617b      	str	r3, [r7, #20]
 8000284:	697a      	ldr	r2, [r7, #20]
 8000286:	687b      	ldr	r3, [r7, #4]
 8000288:	429a      	cmp	r2, r3
 800028a:	dbf1      	blt.n	8000270 <_write+0x12>
  }
  return len;
 800028c:	687b      	ldr	r3, [r7, #4]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3718      	adds	r7, #24
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}

08000296 <_close>:

int _close(int file)
{
 8000296:	b480      	push	{r7}
 8000298:	b083      	sub	sp, #12
 800029a:	af00      	add	r7, sp, #0
 800029c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800029e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr

080002ae <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002ae:	b480      	push	{r7}
 80002b0:	b083      	sub	sp, #12
 80002b2:	af00      	add	r7, sp, #0
 80002b4:	6078      	str	r0, [r7, #4]
 80002b6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002be:	605a      	str	r2, [r3, #4]
  return 0;
 80002c0:	2300      	movs	r3, #0
}
 80002c2:	4618      	mov	r0, r3
 80002c4:	370c      	adds	r7, #12
 80002c6:	46bd      	mov	sp, r7
 80002c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002cc:	4770      	bx	lr

080002ce <_isatty>:

int _isatty(int file)
{
 80002ce:	b480      	push	{r7}
 80002d0:	b083      	sub	sp, #12
 80002d2:	af00      	add	r7, sp, #0
 80002d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002d6:	2301      	movs	r3, #1
}
 80002d8:	4618      	mov	r0, r3
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr

080002e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b085      	sub	sp, #20
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	60f8      	str	r0, [r7, #12]
 80002ec:	60b9      	str	r1, [r7, #8]
 80002ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002f0:	2300      	movs	r3, #0
}
 80002f2:	4618      	mov	r0, r3
 80002f4:	3714      	adds	r7, #20
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
	...

08000300 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b086      	sub	sp, #24
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000308:	4a14      	ldr	r2, [pc, #80]	@ (800035c <_sbrk+0x5c>)
 800030a:	4b15      	ldr	r3, [pc, #84]	@ (8000360 <_sbrk+0x60>)
 800030c:	1ad3      	subs	r3, r2, r3
 800030e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000310:	697b      	ldr	r3, [r7, #20]
 8000312:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000314:	4b13      	ldr	r3, [pc, #76]	@ (8000364 <_sbrk+0x64>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	2b00      	cmp	r3, #0
 800031a:	d102      	bne.n	8000322 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800031c:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <_sbrk+0x64>)
 800031e:	4a12      	ldr	r2, [pc, #72]	@ (8000368 <_sbrk+0x68>)
 8000320:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000322:	4b10      	ldr	r3, [pc, #64]	@ (8000364 <_sbrk+0x64>)
 8000324:	681a      	ldr	r2, [r3, #0]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4413      	add	r3, r2
 800032a:	693a      	ldr	r2, [r7, #16]
 800032c:	429a      	cmp	r2, r3
 800032e:	d207      	bcs.n	8000340 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000330:	f000 fb3e 	bl	80009b0 <__errno>
 8000334:	4603      	mov	r3, r0
 8000336:	220c      	movs	r2, #12
 8000338:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800033a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800033e:	e009      	b.n	8000354 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000340:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <_sbrk+0x64>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000346:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <_sbrk+0x64>)
 8000348:	681a      	ldr	r2, [r3, #0]
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4413      	add	r3, r2
 800034e:	4a05      	ldr	r2, [pc, #20]	@ (8000364 <_sbrk+0x64>)
 8000350:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000352:	68fb      	ldr	r3, [r7, #12]
}
 8000354:	4618      	mov	r0, r3
 8000356:	3718      	adds	r7, #24
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20020000 	.word	0x20020000
 8000360:	00000400 	.word	0x00000400
 8000364:	20000078 	.word	0x20000078
 8000368:	200001c8 	.word	0x200001c8

0800036c <__io_putchar>:
#define USART_DATAREG_READY (1U<<5)
#define UART_RECIEVER_ENABLE (1U<<2)
#define UART_RECIEVER_WAKE (1U<<1)


int __io_putchar(int ch){
 800036c:	b580      	push	{r7, lr}
 800036e:	b082      	sub	sp, #8
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000374:	6878      	ldr	r0, [r7, #4]
 8000376:	f000 f86f 	bl	8000458 <uart_write>
	return ch;
 800037a:	687b      	ldr	r3, [r7, #4]
}
 800037c:	4618      	mov	r0, r3
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <__io_getchar>:
int __io_getchar(void){
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	int ch = uart_read();
 800038a:	f000 f807 	bl	800039c <uart_read>
 800038e:	6078      	str	r0, [r7, #4]
	return ch;
 8000390:	687b      	ldr	r3, [r7, #4]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3708      	adds	r7, #8
 8000396:	46bd      	mov	sp, r7
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <uart_read>:
static int uart_read(void){
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
	while( !(USART2->SR & SR_RXNE) ){}
 80003a0:	bf00      	nop
 80003a2:	4b07      	ldr	r3, [pc, #28]	@ (80003c0 <uart_read+0x24>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f003 0320 	and.w	r3, r3, #32
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f9      	beq.n	80003a2 <uart_read+0x6>
	return (USART2->DR & 0xFF);
 80003ae:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <uart_read+0x24>)
 80003b0:	685b      	ldr	r3, [r3, #4]
 80003b2:	b2db      	uxtb	r3, r3
}
 80003b4:	4618      	mov	r0, r3
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40004400 	.word	0x40004400

080003c4 <uart_tx_init>:
void uart_tx_init(void){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
	 * Enable clock access to GPIOA
	 * Set PA2 mode to alternate function mode
	 * Set alternate function type to AF7
	 */

	RCC->AHB1ENR |= GPIOAEN;
 80003c8:	4b1f      	ldr	r3, [pc, #124]	@ (8000448 <uart_tx_init+0x84>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a1e      	ldr	r2, [pc, #120]	@ (8000448 <uart_tx_init+0x84>)
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOA->MODER |= (1U<<5);
 80003d4:	4b1d      	ldr	r3, [pc, #116]	@ (800044c <uart_tx_init+0x88>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a1c      	ldr	r2, [pc, #112]	@ (800044c <uart_tx_init+0x88>)
 80003da:	f043 0320 	orr.w	r3, r3, #32
 80003de:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~ (1U<<4);
 80003e0:	4b1a      	ldr	r3, [pc, #104]	@ (800044c <uart_tx_init+0x88>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a19      	ldr	r2, [pc, #100]	@ (800044c <uart_tx_init+0x88>)
 80003e6:	f023 0310 	bic.w	r3, r3, #16
 80003ea:	6013      	str	r3, [r2, #0]


	GPIOA->AFR[0] &=~(1U<<11);
 80003ec:	4b17      	ldr	r3, [pc, #92]	@ (800044c <uart_tx_init+0x88>)
 80003ee:	6a1b      	ldr	r3, [r3, #32]
 80003f0:	4a16      	ldr	r2, [pc, #88]	@ (800044c <uart_tx_init+0x88>)
 80003f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80003f8:	4b14      	ldr	r3, [pc, #80]	@ (800044c <uart_tx_init+0x88>)
 80003fa:	6a1b      	ldr	r3, [r3, #32]
 80003fc:	4a13      	ldr	r2, [pc, #76]	@ (800044c <uart_tx_init+0x88>)
 80003fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000402:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000404:	4b11      	ldr	r3, [pc, #68]	@ (800044c <uart_tx_init+0x88>)
 8000406:	6a1b      	ldr	r3, [r3, #32]
 8000408:	4a10      	ldr	r2, [pc, #64]	@ (800044c <uart_tx_init+0x88>)
 800040a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800040e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<8);
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <uart_tx_init+0x88>)
 8000412:	6a1b      	ldr	r3, [r3, #32]
 8000414:	4a0d      	ldr	r2, [pc, #52]	@ (800044c <uart_tx_init+0x88>)
 8000416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800041a:	6213      	str	r3, [r2, #32]
	 * configure baud rate
	 * configure transfer direction
	 *Enable the module
	 */

	RCC->APB1ENR |= UAR2EN;
 800041c:	4b0a      	ldr	r3, [pc, #40]	@ (8000448 <uart_tx_init+0x84>)
 800041e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000420:	4a09      	ldr	r2, [pc, #36]	@ (8000448 <uart_tx_init+0x84>)
 8000422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000426:	6413      	str	r3, [r2, #64]	@ 0x40
	uart_set_baudrate(APB1_CLOCK,UART_BAUDRATE);
 8000428:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 800042c:	4808      	ldr	r0, [pc, #32]	@ (8000450 <uart_tx_init+0x8c>)
 800042e:	f000 f83d 	bl	80004ac <uart_set_baudrate>

	USART2->CR1 = CR1_TE;//transmitter enable and set everything else to zero
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <uart_tx_init+0x90>)
 8000434:	2208      	movs	r2, #8
 8000436:	60da      	str	r2, [r3, #12]
	USART2->CR1 |=  CR1_UE;//enable USART
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <uart_tx_init+0x90>)
 800043a:	68db      	ldr	r3, [r3, #12]
 800043c:	4a05      	ldr	r2, [pc, #20]	@ (8000454 <uart_tx_init+0x90>)
 800043e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000442:	60d3      	str	r3, [r2, #12]

}
 8000444:	bf00      	nop
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40023800 	.word	0x40023800
 800044c:	40020000 	.word	0x40020000
 8000450:	00f42400 	.word	0x00f42400
 8000454:	40004400 	.word	0x40004400

08000458 <uart_write>:
//	return (USART2->DR & 0xFF);
//
//}


static void uart_write(int ch){
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	/*
	 * make sure transmit data reg is empty
	 * write  transmit data registeer
	 * */
	while( !(USART2->SR & SR_TXE) ){}
 8000460:	bf00      	nop
 8000462:	4b08      	ldr	r3, [pc, #32]	@ (8000484 <uart_write+0x2c>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800046a:	2b00      	cmp	r3, #0
 800046c:	d0f9      	beq.n	8000462 <uart_write+0xa>
	USART2->DR = (ch&0XFF);
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a04      	ldr	r2, [pc, #16]	@ (8000484 <uart_write+0x2c>)
 8000472:	b2db      	uxtb	r3, r3
 8000474:	6053      	str	r3, [r2, #4]

}
 8000476:	bf00      	nop
 8000478:	370c      	adds	r7, #12
 800047a:	46bd      	mov	sp, r7
 800047c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000480:	4770      	bx	lr
 8000482:	bf00      	nop
 8000484:	40004400 	.word	0x40004400

08000488 <uart_config_baudrate>:
static uint32_t uart_config_baudrate(uint32_t peripheral_clock, uint32_t baud) {
 8000488:	b480      	push	{r7}
 800048a:	b083      	sub	sp, #12
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
 8000490:	6039      	str	r1, [r7, #0]
    return ( (peripheral_clock + (baud / 2U)) / baud );
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	085a      	lsrs	r2, r3, #1
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	441a      	add	r2, r3
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80004a0:	4618      	mov	r0, r3
 80004a2:	370c      	adds	r7, #12
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr

080004ac <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t peripheral_clock, uint32_t baud) {
 80004ac:	b590      	push	{r4, r7, lr}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
 80004b4:	6039      	str	r1, [r7, #0]
    USART2->BRR = uart_config_baudrate(peripheral_clock, baud);
 80004b6:	4c05      	ldr	r4, [pc, #20]	@ (80004cc <uart_set_baudrate+0x20>)
 80004b8:	6839      	ldr	r1, [r7, #0]
 80004ba:	6878      	ldr	r0, [r7, #4]
 80004bc:	f7ff ffe4 	bl	8000488 <uart_config_baudrate>
 80004c0:	4603      	mov	r3, r0
 80004c2:	60a3      	str	r3, [r4, #8]
}
 80004c4:	bf00      	nop
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd90      	pop	{r4, r7, pc}
 80004cc:	40004400 	.word	0x40004400

080004d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004d0:	480d      	ldr	r0, [pc, #52]	@ (8000508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004d4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004d8:	480c      	ldr	r0, [pc, #48]	@ (800050c <LoopForever+0x6>)
  ldr r1, =_edata
 80004da:	490d      	ldr	r1, [pc, #52]	@ (8000510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000514 <LoopForever+0xe>)
  movs r3, #0
 80004de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e0:	e002      	b.n	80004e8 <LoopCopyDataInit>

080004e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004e6:	3304      	adds	r3, #4

080004e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004ec:	d3f9      	bcc.n	80004e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80004f0:	4c0a      	ldr	r4, [pc, #40]	@ (800051c <LoopForever+0x16>)
  movs r3, #0
 80004f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004f4:	e001      	b.n	80004fa <LoopFillZerobss>

080004f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f8:	3204      	adds	r2, #4

080004fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004fc:	d3fb      	bcc.n	80004f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004fe:	f000 fa5d 	bl	80009bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000502:	f7ff fe69 	bl	80001d8 <main>

08000506 <LoopForever>:

LoopForever:
  b LoopForever
 8000506:	e7fe      	b.n	8000506 <LoopForever>
  ldr   r0, =_estack
 8000508:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800050c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000510:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000514:	08000eb0 	.word	0x08000eb0
  ldr r2, =_sbss
 8000518:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800051c:	200001c8 	.word	0x200001c8

08000520 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000520:	e7fe      	b.n	8000520 <ADC_IRQHandler>
	...

08000524 <std>:
 8000524:	2300      	movs	r3, #0
 8000526:	b510      	push	{r4, lr}
 8000528:	4604      	mov	r4, r0
 800052a:	e9c0 3300 	strd	r3, r3, [r0]
 800052e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000532:	6083      	str	r3, [r0, #8]
 8000534:	8181      	strh	r1, [r0, #12]
 8000536:	6643      	str	r3, [r0, #100]	@ 0x64
 8000538:	81c2      	strh	r2, [r0, #14]
 800053a:	6183      	str	r3, [r0, #24]
 800053c:	4619      	mov	r1, r3
 800053e:	2208      	movs	r2, #8
 8000540:	305c      	adds	r0, #92	@ 0x5c
 8000542:	f000 f9e7 	bl	8000914 <memset>
 8000546:	4b0d      	ldr	r3, [pc, #52]	@ (800057c <std+0x58>)
 8000548:	6263      	str	r3, [r4, #36]	@ 0x24
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <std+0x5c>)
 800054c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800054e:	4b0d      	ldr	r3, [pc, #52]	@ (8000584 <std+0x60>)
 8000550:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000552:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <std+0x64>)
 8000554:	6323      	str	r3, [r4, #48]	@ 0x30
 8000556:	4b0d      	ldr	r3, [pc, #52]	@ (800058c <std+0x68>)
 8000558:	6224      	str	r4, [r4, #32]
 800055a:	429c      	cmp	r4, r3
 800055c:	d006      	beq.n	800056c <std+0x48>
 800055e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000562:	4294      	cmp	r4, r2
 8000564:	d002      	beq.n	800056c <std+0x48>
 8000566:	33d0      	adds	r3, #208	@ 0xd0
 8000568:	429c      	cmp	r4, r3
 800056a:	d105      	bne.n	8000578 <std+0x54>
 800056c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000574:	f000 ba46 	b.w	8000a04 <__retarget_lock_init_recursive>
 8000578:	bd10      	pop	{r4, pc}
 800057a:	bf00      	nop
 800057c:	08000765 	.word	0x08000765
 8000580:	08000787 	.word	0x08000787
 8000584:	080007bf 	.word	0x080007bf
 8000588:	080007e3 	.word	0x080007e3
 800058c:	2000007c 	.word	0x2000007c

08000590 <stdio_exit_handler>:
 8000590:	4a02      	ldr	r2, [pc, #8]	@ (800059c <stdio_exit_handler+0xc>)
 8000592:	4903      	ldr	r1, [pc, #12]	@ (80005a0 <stdio_exit_handler+0x10>)
 8000594:	4803      	ldr	r0, [pc, #12]	@ (80005a4 <stdio_exit_handler+0x14>)
 8000596:	f000 b869 	b.w	800066c <_fwalk_sglue>
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000
 80005a0:	08000d05 	.word	0x08000d05
 80005a4:	20000010 	.word	0x20000010

080005a8 <cleanup_stdio>:
 80005a8:	6841      	ldr	r1, [r0, #4]
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <cleanup_stdio+0x34>)
 80005ac:	4299      	cmp	r1, r3
 80005ae:	b510      	push	{r4, lr}
 80005b0:	4604      	mov	r4, r0
 80005b2:	d001      	beq.n	80005b8 <cleanup_stdio+0x10>
 80005b4:	f000 fba6 	bl	8000d04 <_fflush_r>
 80005b8:	68a1      	ldr	r1, [r4, #8]
 80005ba:	4b09      	ldr	r3, [pc, #36]	@ (80005e0 <cleanup_stdio+0x38>)
 80005bc:	4299      	cmp	r1, r3
 80005be:	d002      	beq.n	80005c6 <cleanup_stdio+0x1e>
 80005c0:	4620      	mov	r0, r4
 80005c2:	f000 fb9f 	bl	8000d04 <_fflush_r>
 80005c6:	68e1      	ldr	r1, [r4, #12]
 80005c8:	4b06      	ldr	r3, [pc, #24]	@ (80005e4 <cleanup_stdio+0x3c>)
 80005ca:	4299      	cmp	r1, r3
 80005cc:	d004      	beq.n	80005d8 <cleanup_stdio+0x30>
 80005ce:	4620      	mov	r0, r4
 80005d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005d4:	f000 bb96 	b.w	8000d04 <_fflush_r>
 80005d8:	bd10      	pop	{r4, pc}
 80005da:	bf00      	nop
 80005dc:	2000007c 	.word	0x2000007c
 80005e0:	200000e4 	.word	0x200000e4
 80005e4:	2000014c 	.word	0x2000014c

080005e8 <global_stdio_init.part.0>:
 80005e8:	b510      	push	{r4, lr}
 80005ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000618 <global_stdio_init.part.0+0x30>)
 80005ec:	4c0b      	ldr	r4, [pc, #44]	@ (800061c <global_stdio_init.part.0+0x34>)
 80005ee:	4a0c      	ldr	r2, [pc, #48]	@ (8000620 <global_stdio_init.part.0+0x38>)
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	4620      	mov	r0, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	2104      	movs	r1, #4
 80005f8:	f7ff ff94 	bl	8000524 <std>
 80005fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000600:	2201      	movs	r2, #1
 8000602:	2109      	movs	r1, #9
 8000604:	f7ff ff8e 	bl	8000524 <std>
 8000608:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800060c:	2202      	movs	r2, #2
 800060e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000612:	2112      	movs	r1, #18
 8000614:	f7ff bf86 	b.w	8000524 <std>
 8000618:	200001b4 	.word	0x200001b4
 800061c:	2000007c 	.word	0x2000007c
 8000620:	08000591 	.word	0x08000591

08000624 <__sfp_lock_acquire>:
 8000624:	4801      	ldr	r0, [pc, #4]	@ (800062c <__sfp_lock_acquire+0x8>)
 8000626:	f000 b9ee 	b.w	8000a06 <__retarget_lock_acquire_recursive>
 800062a:	bf00      	nop
 800062c:	200001bd 	.word	0x200001bd

08000630 <__sfp_lock_release>:
 8000630:	4801      	ldr	r0, [pc, #4]	@ (8000638 <__sfp_lock_release+0x8>)
 8000632:	f000 b9e9 	b.w	8000a08 <__retarget_lock_release_recursive>
 8000636:	bf00      	nop
 8000638:	200001bd 	.word	0x200001bd

0800063c <__sinit>:
 800063c:	b510      	push	{r4, lr}
 800063e:	4604      	mov	r4, r0
 8000640:	f7ff fff0 	bl	8000624 <__sfp_lock_acquire>
 8000644:	6a23      	ldr	r3, [r4, #32]
 8000646:	b11b      	cbz	r3, 8000650 <__sinit+0x14>
 8000648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800064c:	f7ff bff0 	b.w	8000630 <__sfp_lock_release>
 8000650:	4b04      	ldr	r3, [pc, #16]	@ (8000664 <__sinit+0x28>)
 8000652:	6223      	str	r3, [r4, #32]
 8000654:	4b04      	ldr	r3, [pc, #16]	@ (8000668 <__sinit+0x2c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1f5      	bne.n	8000648 <__sinit+0xc>
 800065c:	f7ff ffc4 	bl	80005e8 <global_stdio_init.part.0>
 8000660:	e7f2      	b.n	8000648 <__sinit+0xc>
 8000662:	bf00      	nop
 8000664:	080005a9 	.word	0x080005a9
 8000668:	200001b4 	.word	0x200001b4

0800066c <_fwalk_sglue>:
 800066c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000670:	4607      	mov	r7, r0
 8000672:	4688      	mov	r8, r1
 8000674:	4614      	mov	r4, r2
 8000676:	2600      	movs	r6, #0
 8000678:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800067c:	f1b9 0901 	subs.w	r9, r9, #1
 8000680:	d505      	bpl.n	800068e <_fwalk_sglue+0x22>
 8000682:	6824      	ldr	r4, [r4, #0]
 8000684:	2c00      	cmp	r4, #0
 8000686:	d1f7      	bne.n	8000678 <_fwalk_sglue+0xc>
 8000688:	4630      	mov	r0, r6
 800068a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800068e:	89ab      	ldrh	r3, [r5, #12]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d907      	bls.n	80006a4 <_fwalk_sglue+0x38>
 8000694:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000698:	3301      	adds	r3, #1
 800069a:	d003      	beq.n	80006a4 <_fwalk_sglue+0x38>
 800069c:	4629      	mov	r1, r5
 800069e:	4638      	mov	r0, r7
 80006a0:	47c0      	blx	r8
 80006a2:	4306      	orrs	r6, r0
 80006a4:	3568      	adds	r5, #104	@ 0x68
 80006a6:	e7e9      	b.n	800067c <_fwalk_sglue+0x10>

080006a8 <_puts_r>:
 80006a8:	6a03      	ldr	r3, [r0, #32]
 80006aa:	b570      	push	{r4, r5, r6, lr}
 80006ac:	6884      	ldr	r4, [r0, #8]
 80006ae:	4605      	mov	r5, r0
 80006b0:	460e      	mov	r6, r1
 80006b2:	b90b      	cbnz	r3, 80006b8 <_puts_r+0x10>
 80006b4:	f7ff ffc2 	bl	800063c <__sinit>
 80006b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006ba:	07db      	lsls	r3, r3, #31
 80006bc:	d405      	bmi.n	80006ca <_puts_r+0x22>
 80006be:	89a3      	ldrh	r3, [r4, #12]
 80006c0:	0598      	lsls	r0, r3, #22
 80006c2:	d402      	bmi.n	80006ca <_puts_r+0x22>
 80006c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006c6:	f000 f99e 	bl	8000a06 <__retarget_lock_acquire_recursive>
 80006ca:	89a3      	ldrh	r3, [r4, #12]
 80006cc:	0719      	lsls	r1, r3, #28
 80006ce:	d502      	bpl.n	80006d6 <_puts_r+0x2e>
 80006d0:	6923      	ldr	r3, [r4, #16]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d135      	bne.n	8000742 <_puts_r+0x9a>
 80006d6:	4621      	mov	r1, r4
 80006d8:	4628      	mov	r0, r5
 80006da:	f000 f8c5 	bl	8000868 <__swsetup_r>
 80006de:	b380      	cbz	r0, 8000742 <_puts_r+0x9a>
 80006e0:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80006e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006e6:	07da      	lsls	r2, r3, #31
 80006e8:	d405      	bmi.n	80006f6 <_puts_r+0x4e>
 80006ea:	89a3      	ldrh	r3, [r4, #12]
 80006ec:	059b      	lsls	r3, r3, #22
 80006ee:	d402      	bmi.n	80006f6 <_puts_r+0x4e>
 80006f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006f2:	f000 f989 	bl	8000a08 <__retarget_lock_release_recursive>
 80006f6:	4628      	mov	r0, r5
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da04      	bge.n	8000708 <_puts_r+0x60>
 80006fe:	69a2      	ldr	r2, [r4, #24]
 8000700:	429a      	cmp	r2, r3
 8000702:	dc17      	bgt.n	8000734 <_puts_r+0x8c>
 8000704:	290a      	cmp	r1, #10
 8000706:	d015      	beq.n	8000734 <_puts_r+0x8c>
 8000708:	6823      	ldr	r3, [r4, #0]
 800070a:	1c5a      	adds	r2, r3, #1
 800070c:	6022      	str	r2, [r4, #0]
 800070e:	7019      	strb	r1, [r3, #0]
 8000710:	68a3      	ldr	r3, [r4, #8]
 8000712:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000716:	3b01      	subs	r3, #1
 8000718:	60a3      	str	r3, [r4, #8]
 800071a:	2900      	cmp	r1, #0
 800071c:	d1ed      	bne.n	80006fa <_puts_r+0x52>
 800071e:	2b00      	cmp	r3, #0
 8000720:	da11      	bge.n	8000746 <_puts_r+0x9e>
 8000722:	4622      	mov	r2, r4
 8000724:	210a      	movs	r1, #10
 8000726:	4628      	mov	r0, r5
 8000728:	f000 f85f 	bl	80007ea <__swbuf_r>
 800072c:	3001      	adds	r0, #1
 800072e:	d0d7      	beq.n	80006e0 <_puts_r+0x38>
 8000730:	250a      	movs	r5, #10
 8000732:	e7d7      	b.n	80006e4 <_puts_r+0x3c>
 8000734:	4622      	mov	r2, r4
 8000736:	4628      	mov	r0, r5
 8000738:	f000 f857 	bl	80007ea <__swbuf_r>
 800073c:	3001      	adds	r0, #1
 800073e:	d1e7      	bne.n	8000710 <_puts_r+0x68>
 8000740:	e7ce      	b.n	80006e0 <_puts_r+0x38>
 8000742:	3e01      	subs	r6, #1
 8000744:	e7e4      	b.n	8000710 <_puts_r+0x68>
 8000746:	6823      	ldr	r3, [r4, #0]
 8000748:	1c5a      	adds	r2, r3, #1
 800074a:	6022      	str	r2, [r4, #0]
 800074c:	220a      	movs	r2, #10
 800074e:	701a      	strb	r2, [r3, #0]
 8000750:	e7ee      	b.n	8000730 <_puts_r+0x88>
	...

08000754 <puts>:
 8000754:	4b02      	ldr	r3, [pc, #8]	@ (8000760 <puts+0xc>)
 8000756:	4601      	mov	r1, r0
 8000758:	6818      	ldr	r0, [r3, #0]
 800075a:	f7ff bfa5 	b.w	80006a8 <_puts_r>
 800075e:	bf00      	nop
 8000760:	2000000c 	.word	0x2000000c

08000764 <__sread>:
 8000764:	b510      	push	{r4, lr}
 8000766:	460c      	mov	r4, r1
 8000768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800076c:	f000 f8fc 	bl	8000968 <_read_r>
 8000770:	2800      	cmp	r0, #0
 8000772:	bfab      	itete	ge
 8000774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000776:	89a3      	ldrhlt	r3, [r4, #12]
 8000778:	181b      	addge	r3, r3, r0
 800077a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800077e:	bfac      	ite	ge
 8000780:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000782:	81a3      	strhlt	r3, [r4, #12]
 8000784:	bd10      	pop	{r4, pc}

08000786 <__swrite>:
 8000786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800078a:	461f      	mov	r7, r3
 800078c:	898b      	ldrh	r3, [r1, #12]
 800078e:	05db      	lsls	r3, r3, #23
 8000790:	4605      	mov	r5, r0
 8000792:	460c      	mov	r4, r1
 8000794:	4616      	mov	r6, r2
 8000796:	d505      	bpl.n	80007a4 <__swrite+0x1e>
 8000798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800079c:	2302      	movs	r3, #2
 800079e:	2200      	movs	r2, #0
 80007a0:	f000 f8d0 	bl	8000944 <_lseek_r>
 80007a4:	89a3      	ldrh	r3, [r4, #12]
 80007a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80007aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007ae:	81a3      	strh	r3, [r4, #12]
 80007b0:	4632      	mov	r2, r6
 80007b2:	463b      	mov	r3, r7
 80007b4:	4628      	mov	r0, r5
 80007b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80007ba:	f000 b8e7 	b.w	800098c <_write_r>

080007be <__sseek>:
 80007be:	b510      	push	{r4, lr}
 80007c0:	460c      	mov	r4, r1
 80007c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007c6:	f000 f8bd 	bl	8000944 <_lseek_r>
 80007ca:	1c43      	adds	r3, r0, #1
 80007cc:	89a3      	ldrh	r3, [r4, #12]
 80007ce:	bf15      	itete	ne
 80007d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007da:	81a3      	strheq	r3, [r4, #12]
 80007dc:	bf18      	it	ne
 80007de:	81a3      	strhne	r3, [r4, #12]
 80007e0:	bd10      	pop	{r4, pc}

080007e2 <__sclose>:
 80007e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007e6:	f000 b89d 	b.w	8000924 <_close_r>

080007ea <__swbuf_r>:
 80007ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007ec:	460e      	mov	r6, r1
 80007ee:	4614      	mov	r4, r2
 80007f0:	4605      	mov	r5, r0
 80007f2:	b118      	cbz	r0, 80007fc <__swbuf_r+0x12>
 80007f4:	6a03      	ldr	r3, [r0, #32]
 80007f6:	b90b      	cbnz	r3, 80007fc <__swbuf_r+0x12>
 80007f8:	f7ff ff20 	bl	800063c <__sinit>
 80007fc:	69a3      	ldr	r3, [r4, #24]
 80007fe:	60a3      	str	r3, [r4, #8]
 8000800:	89a3      	ldrh	r3, [r4, #12]
 8000802:	071a      	lsls	r2, r3, #28
 8000804:	d501      	bpl.n	800080a <__swbuf_r+0x20>
 8000806:	6923      	ldr	r3, [r4, #16]
 8000808:	b943      	cbnz	r3, 800081c <__swbuf_r+0x32>
 800080a:	4621      	mov	r1, r4
 800080c:	4628      	mov	r0, r5
 800080e:	f000 f82b 	bl	8000868 <__swsetup_r>
 8000812:	b118      	cbz	r0, 800081c <__swbuf_r+0x32>
 8000814:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8000818:	4638      	mov	r0, r7
 800081a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	6922      	ldr	r2, [r4, #16]
 8000820:	1a98      	subs	r0, r3, r2
 8000822:	6963      	ldr	r3, [r4, #20]
 8000824:	b2f6      	uxtb	r6, r6
 8000826:	4283      	cmp	r3, r0
 8000828:	4637      	mov	r7, r6
 800082a:	dc05      	bgt.n	8000838 <__swbuf_r+0x4e>
 800082c:	4621      	mov	r1, r4
 800082e:	4628      	mov	r0, r5
 8000830:	f000 fa68 	bl	8000d04 <_fflush_r>
 8000834:	2800      	cmp	r0, #0
 8000836:	d1ed      	bne.n	8000814 <__swbuf_r+0x2a>
 8000838:	68a3      	ldr	r3, [r4, #8]
 800083a:	3b01      	subs	r3, #1
 800083c:	60a3      	str	r3, [r4, #8]
 800083e:	6823      	ldr	r3, [r4, #0]
 8000840:	1c5a      	adds	r2, r3, #1
 8000842:	6022      	str	r2, [r4, #0]
 8000844:	701e      	strb	r6, [r3, #0]
 8000846:	6962      	ldr	r2, [r4, #20]
 8000848:	1c43      	adds	r3, r0, #1
 800084a:	429a      	cmp	r2, r3
 800084c:	d004      	beq.n	8000858 <__swbuf_r+0x6e>
 800084e:	89a3      	ldrh	r3, [r4, #12]
 8000850:	07db      	lsls	r3, r3, #31
 8000852:	d5e1      	bpl.n	8000818 <__swbuf_r+0x2e>
 8000854:	2e0a      	cmp	r6, #10
 8000856:	d1df      	bne.n	8000818 <__swbuf_r+0x2e>
 8000858:	4621      	mov	r1, r4
 800085a:	4628      	mov	r0, r5
 800085c:	f000 fa52 	bl	8000d04 <_fflush_r>
 8000860:	2800      	cmp	r0, #0
 8000862:	d0d9      	beq.n	8000818 <__swbuf_r+0x2e>
 8000864:	e7d6      	b.n	8000814 <__swbuf_r+0x2a>
	...

08000868 <__swsetup_r>:
 8000868:	b538      	push	{r3, r4, r5, lr}
 800086a:	4b29      	ldr	r3, [pc, #164]	@ (8000910 <__swsetup_r+0xa8>)
 800086c:	4605      	mov	r5, r0
 800086e:	6818      	ldr	r0, [r3, #0]
 8000870:	460c      	mov	r4, r1
 8000872:	b118      	cbz	r0, 800087c <__swsetup_r+0x14>
 8000874:	6a03      	ldr	r3, [r0, #32]
 8000876:	b90b      	cbnz	r3, 800087c <__swsetup_r+0x14>
 8000878:	f7ff fee0 	bl	800063c <__sinit>
 800087c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000880:	0719      	lsls	r1, r3, #28
 8000882:	d422      	bmi.n	80008ca <__swsetup_r+0x62>
 8000884:	06da      	lsls	r2, r3, #27
 8000886:	d407      	bmi.n	8000898 <__swsetup_r+0x30>
 8000888:	2209      	movs	r2, #9
 800088a:	602a      	str	r2, [r5, #0]
 800088c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000890:	81a3      	strh	r3, [r4, #12]
 8000892:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000896:	e033      	b.n	8000900 <__swsetup_r+0x98>
 8000898:	0758      	lsls	r0, r3, #29
 800089a:	d512      	bpl.n	80008c2 <__swsetup_r+0x5a>
 800089c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800089e:	b141      	cbz	r1, 80008b2 <__swsetup_r+0x4a>
 80008a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80008a4:	4299      	cmp	r1, r3
 80008a6:	d002      	beq.n	80008ae <__swsetup_r+0x46>
 80008a8:	4628      	mov	r0, r5
 80008aa:	f000 f8af 	bl	8000a0c <_free_r>
 80008ae:	2300      	movs	r3, #0
 80008b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80008b8:	81a3      	strh	r3, [r4, #12]
 80008ba:	2300      	movs	r3, #0
 80008bc:	6063      	str	r3, [r4, #4]
 80008be:	6923      	ldr	r3, [r4, #16]
 80008c0:	6023      	str	r3, [r4, #0]
 80008c2:	89a3      	ldrh	r3, [r4, #12]
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	81a3      	strh	r3, [r4, #12]
 80008ca:	6923      	ldr	r3, [r4, #16]
 80008cc:	b94b      	cbnz	r3, 80008e2 <__swsetup_r+0x7a>
 80008ce:	89a3      	ldrh	r3, [r4, #12]
 80008d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80008d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008d8:	d003      	beq.n	80008e2 <__swsetup_r+0x7a>
 80008da:	4621      	mov	r1, r4
 80008dc:	4628      	mov	r0, r5
 80008de:	f000 fa5f 	bl	8000da0 <__smakebuf_r>
 80008e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008e6:	f013 0201 	ands.w	r2, r3, #1
 80008ea:	d00a      	beq.n	8000902 <__swsetup_r+0x9a>
 80008ec:	2200      	movs	r2, #0
 80008ee:	60a2      	str	r2, [r4, #8]
 80008f0:	6962      	ldr	r2, [r4, #20]
 80008f2:	4252      	negs	r2, r2
 80008f4:	61a2      	str	r2, [r4, #24]
 80008f6:	6922      	ldr	r2, [r4, #16]
 80008f8:	b942      	cbnz	r2, 800090c <__swsetup_r+0xa4>
 80008fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80008fe:	d1c5      	bne.n	800088c <__swsetup_r+0x24>
 8000900:	bd38      	pop	{r3, r4, r5, pc}
 8000902:	0799      	lsls	r1, r3, #30
 8000904:	bf58      	it	pl
 8000906:	6962      	ldrpl	r2, [r4, #20]
 8000908:	60a2      	str	r2, [r4, #8]
 800090a:	e7f4      	b.n	80008f6 <__swsetup_r+0x8e>
 800090c:	2000      	movs	r0, #0
 800090e:	e7f7      	b.n	8000900 <__swsetup_r+0x98>
 8000910:	2000000c 	.word	0x2000000c

08000914 <memset>:
 8000914:	4402      	add	r2, r0
 8000916:	4603      	mov	r3, r0
 8000918:	4293      	cmp	r3, r2
 800091a:	d100      	bne.n	800091e <memset+0xa>
 800091c:	4770      	bx	lr
 800091e:	f803 1b01 	strb.w	r1, [r3], #1
 8000922:	e7f9      	b.n	8000918 <memset+0x4>

08000924 <_close_r>:
 8000924:	b538      	push	{r3, r4, r5, lr}
 8000926:	4d06      	ldr	r5, [pc, #24]	@ (8000940 <_close_r+0x1c>)
 8000928:	2300      	movs	r3, #0
 800092a:	4604      	mov	r4, r0
 800092c:	4608      	mov	r0, r1
 800092e:	602b      	str	r3, [r5, #0]
 8000930:	f7ff fcb1 	bl	8000296 <_close>
 8000934:	1c43      	adds	r3, r0, #1
 8000936:	d102      	bne.n	800093e <_close_r+0x1a>
 8000938:	682b      	ldr	r3, [r5, #0]
 800093a:	b103      	cbz	r3, 800093e <_close_r+0x1a>
 800093c:	6023      	str	r3, [r4, #0]
 800093e:	bd38      	pop	{r3, r4, r5, pc}
 8000940:	200001b8 	.word	0x200001b8

08000944 <_lseek_r>:
 8000944:	b538      	push	{r3, r4, r5, lr}
 8000946:	4d07      	ldr	r5, [pc, #28]	@ (8000964 <_lseek_r+0x20>)
 8000948:	4604      	mov	r4, r0
 800094a:	4608      	mov	r0, r1
 800094c:	4611      	mov	r1, r2
 800094e:	2200      	movs	r2, #0
 8000950:	602a      	str	r2, [r5, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	f7ff fcc6 	bl	80002e4 <_lseek>
 8000958:	1c43      	adds	r3, r0, #1
 800095a:	d102      	bne.n	8000962 <_lseek_r+0x1e>
 800095c:	682b      	ldr	r3, [r5, #0]
 800095e:	b103      	cbz	r3, 8000962 <_lseek_r+0x1e>
 8000960:	6023      	str	r3, [r4, #0]
 8000962:	bd38      	pop	{r3, r4, r5, pc}
 8000964:	200001b8 	.word	0x200001b8

08000968 <_read_r>:
 8000968:	b538      	push	{r3, r4, r5, lr}
 800096a:	4d07      	ldr	r5, [pc, #28]	@ (8000988 <_read_r+0x20>)
 800096c:	4604      	mov	r4, r0
 800096e:	4608      	mov	r0, r1
 8000970:	4611      	mov	r1, r2
 8000972:	2200      	movs	r2, #0
 8000974:	602a      	str	r2, [r5, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	f7ff fc54 	bl	8000224 <_read>
 800097c:	1c43      	adds	r3, r0, #1
 800097e:	d102      	bne.n	8000986 <_read_r+0x1e>
 8000980:	682b      	ldr	r3, [r5, #0]
 8000982:	b103      	cbz	r3, 8000986 <_read_r+0x1e>
 8000984:	6023      	str	r3, [r4, #0]
 8000986:	bd38      	pop	{r3, r4, r5, pc}
 8000988:	200001b8 	.word	0x200001b8

0800098c <_write_r>:
 800098c:	b538      	push	{r3, r4, r5, lr}
 800098e:	4d07      	ldr	r5, [pc, #28]	@ (80009ac <_write_r+0x20>)
 8000990:	4604      	mov	r4, r0
 8000992:	4608      	mov	r0, r1
 8000994:	4611      	mov	r1, r2
 8000996:	2200      	movs	r2, #0
 8000998:	602a      	str	r2, [r5, #0]
 800099a:	461a      	mov	r2, r3
 800099c:	f7ff fc5f 	bl	800025e <_write>
 80009a0:	1c43      	adds	r3, r0, #1
 80009a2:	d102      	bne.n	80009aa <_write_r+0x1e>
 80009a4:	682b      	ldr	r3, [r5, #0]
 80009a6:	b103      	cbz	r3, 80009aa <_write_r+0x1e>
 80009a8:	6023      	str	r3, [r4, #0]
 80009aa:	bd38      	pop	{r3, r4, r5, pc}
 80009ac:	200001b8 	.word	0x200001b8

080009b0 <__errno>:
 80009b0:	4b01      	ldr	r3, [pc, #4]	@ (80009b8 <__errno+0x8>)
 80009b2:	6818      	ldr	r0, [r3, #0]
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	2000000c 	.word	0x2000000c

080009bc <__libc_init_array>:
 80009bc:	b570      	push	{r4, r5, r6, lr}
 80009be:	4d0d      	ldr	r5, [pc, #52]	@ (80009f4 <__libc_init_array+0x38>)
 80009c0:	4c0d      	ldr	r4, [pc, #52]	@ (80009f8 <__libc_init_array+0x3c>)
 80009c2:	1b64      	subs	r4, r4, r5
 80009c4:	10a4      	asrs	r4, r4, #2
 80009c6:	2600      	movs	r6, #0
 80009c8:	42a6      	cmp	r6, r4
 80009ca:	d109      	bne.n	80009e0 <__libc_init_array+0x24>
 80009cc:	4d0b      	ldr	r5, [pc, #44]	@ (80009fc <__libc_init_array+0x40>)
 80009ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000a00 <__libc_init_array+0x44>)
 80009d0:	f000 fa54 	bl	8000e7c <_init>
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	10a4      	asrs	r4, r4, #2
 80009d8:	2600      	movs	r6, #0
 80009da:	42a6      	cmp	r6, r4
 80009dc:	d105      	bne.n	80009ea <__libc_init_array+0x2e>
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80009e4:	4798      	blx	r3
 80009e6:	3601      	adds	r6, #1
 80009e8:	e7ee      	b.n	80009c8 <__libc_init_array+0xc>
 80009ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ee:	4798      	blx	r3
 80009f0:	3601      	adds	r6, #1
 80009f2:	e7f2      	b.n	80009da <__libc_init_array+0x1e>
 80009f4:	08000ea8 	.word	0x08000ea8
 80009f8:	08000ea8 	.word	0x08000ea8
 80009fc:	08000ea8 	.word	0x08000ea8
 8000a00:	08000eac 	.word	0x08000eac

08000a04 <__retarget_lock_init_recursive>:
 8000a04:	4770      	bx	lr

08000a06 <__retarget_lock_acquire_recursive>:
 8000a06:	4770      	bx	lr

08000a08 <__retarget_lock_release_recursive>:
 8000a08:	4770      	bx	lr
	...

08000a0c <_free_r>:
 8000a0c:	b538      	push	{r3, r4, r5, lr}
 8000a0e:	4605      	mov	r5, r0
 8000a10:	2900      	cmp	r1, #0
 8000a12:	d041      	beq.n	8000a98 <_free_r+0x8c>
 8000a14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a18:	1f0c      	subs	r4, r1, #4
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	bfb8      	it	lt
 8000a1e:	18e4      	addlt	r4, r4, r3
 8000a20:	f000 f8e0 	bl	8000be4 <__malloc_lock>
 8000a24:	4a1d      	ldr	r2, [pc, #116]	@ (8000a9c <_free_r+0x90>)
 8000a26:	6813      	ldr	r3, [r2, #0]
 8000a28:	b933      	cbnz	r3, 8000a38 <_free_r+0x2c>
 8000a2a:	6063      	str	r3, [r4, #4]
 8000a2c:	6014      	str	r4, [r2, #0]
 8000a2e:	4628      	mov	r0, r5
 8000a30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a34:	f000 b8dc 	b.w	8000bf0 <__malloc_unlock>
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d908      	bls.n	8000a4e <_free_r+0x42>
 8000a3c:	6820      	ldr	r0, [r4, #0]
 8000a3e:	1821      	adds	r1, r4, r0
 8000a40:	428b      	cmp	r3, r1
 8000a42:	bf01      	itttt	eq
 8000a44:	6819      	ldreq	r1, [r3, #0]
 8000a46:	685b      	ldreq	r3, [r3, #4]
 8000a48:	1809      	addeq	r1, r1, r0
 8000a4a:	6021      	streq	r1, [r4, #0]
 8000a4c:	e7ed      	b.n	8000a2a <_free_r+0x1e>
 8000a4e:	461a      	mov	r2, r3
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	b10b      	cbz	r3, 8000a58 <_free_r+0x4c>
 8000a54:	42a3      	cmp	r3, r4
 8000a56:	d9fa      	bls.n	8000a4e <_free_r+0x42>
 8000a58:	6811      	ldr	r1, [r2, #0]
 8000a5a:	1850      	adds	r0, r2, r1
 8000a5c:	42a0      	cmp	r0, r4
 8000a5e:	d10b      	bne.n	8000a78 <_free_r+0x6c>
 8000a60:	6820      	ldr	r0, [r4, #0]
 8000a62:	4401      	add	r1, r0
 8000a64:	1850      	adds	r0, r2, r1
 8000a66:	4283      	cmp	r3, r0
 8000a68:	6011      	str	r1, [r2, #0]
 8000a6a:	d1e0      	bne.n	8000a2e <_free_r+0x22>
 8000a6c:	6818      	ldr	r0, [r3, #0]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	6053      	str	r3, [r2, #4]
 8000a72:	4408      	add	r0, r1
 8000a74:	6010      	str	r0, [r2, #0]
 8000a76:	e7da      	b.n	8000a2e <_free_r+0x22>
 8000a78:	d902      	bls.n	8000a80 <_free_r+0x74>
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	602b      	str	r3, [r5, #0]
 8000a7e:	e7d6      	b.n	8000a2e <_free_r+0x22>
 8000a80:	6820      	ldr	r0, [r4, #0]
 8000a82:	1821      	adds	r1, r4, r0
 8000a84:	428b      	cmp	r3, r1
 8000a86:	bf04      	itt	eq
 8000a88:	6819      	ldreq	r1, [r3, #0]
 8000a8a:	685b      	ldreq	r3, [r3, #4]
 8000a8c:	6063      	str	r3, [r4, #4]
 8000a8e:	bf04      	itt	eq
 8000a90:	1809      	addeq	r1, r1, r0
 8000a92:	6021      	streq	r1, [r4, #0]
 8000a94:	6054      	str	r4, [r2, #4]
 8000a96:	e7ca      	b.n	8000a2e <_free_r+0x22>
 8000a98:	bd38      	pop	{r3, r4, r5, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200001c4 	.word	0x200001c4

08000aa0 <sbrk_aligned>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8000ae0 <sbrk_aligned+0x40>)
 8000aa4:	460c      	mov	r4, r1
 8000aa6:	6831      	ldr	r1, [r6, #0]
 8000aa8:	4605      	mov	r5, r0
 8000aaa:	b911      	cbnz	r1, 8000ab2 <sbrk_aligned+0x12>
 8000aac:	f000 f9d6 	bl	8000e5c <_sbrk_r>
 8000ab0:	6030      	str	r0, [r6, #0]
 8000ab2:	4621      	mov	r1, r4
 8000ab4:	4628      	mov	r0, r5
 8000ab6:	f000 f9d1 	bl	8000e5c <_sbrk_r>
 8000aba:	1c43      	adds	r3, r0, #1
 8000abc:	d103      	bne.n	8000ac6 <sbrk_aligned+0x26>
 8000abe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	bd70      	pop	{r4, r5, r6, pc}
 8000ac6:	1cc4      	adds	r4, r0, #3
 8000ac8:	f024 0403 	bic.w	r4, r4, #3
 8000acc:	42a0      	cmp	r0, r4
 8000ace:	d0f8      	beq.n	8000ac2 <sbrk_aligned+0x22>
 8000ad0:	1a21      	subs	r1, r4, r0
 8000ad2:	4628      	mov	r0, r5
 8000ad4:	f000 f9c2 	bl	8000e5c <_sbrk_r>
 8000ad8:	3001      	adds	r0, #1
 8000ada:	d1f2      	bne.n	8000ac2 <sbrk_aligned+0x22>
 8000adc:	e7ef      	b.n	8000abe <sbrk_aligned+0x1e>
 8000ade:	bf00      	nop
 8000ae0:	200001c0 	.word	0x200001c0

08000ae4 <_malloc_r>:
 8000ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ae8:	1ccd      	adds	r5, r1, #3
 8000aea:	f025 0503 	bic.w	r5, r5, #3
 8000aee:	3508      	adds	r5, #8
 8000af0:	2d0c      	cmp	r5, #12
 8000af2:	bf38      	it	cc
 8000af4:	250c      	movcc	r5, #12
 8000af6:	2d00      	cmp	r5, #0
 8000af8:	4606      	mov	r6, r0
 8000afa:	db01      	blt.n	8000b00 <_malloc_r+0x1c>
 8000afc:	42a9      	cmp	r1, r5
 8000afe:	d904      	bls.n	8000b0a <_malloc_r+0x26>
 8000b00:	230c      	movs	r3, #12
 8000b02:	6033      	str	r3, [r6, #0]
 8000b04:	2000      	movs	r0, #0
 8000b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000be0 <_malloc_r+0xfc>
 8000b0e:	f000 f869 	bl	8000be4 <__malloc_lock>
 8000b12:	f8d8 3000 	ldr.w	r3, [r8]
 8000b16:	461c      	mov	r4, r3
 8000b18:	bb44      	cbnz	r4, 8000b6c <_malloc_r+0x88>
 8000b1a:	4629      	mov	r1, r5
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f7ff ffbf 	bl	8000aa0 <sbrk_aligned>
 8000b22:	1c43      	adds	r3, r0, #1
 8000b24:	4604      	mov	r4, r0
 8000b26:	d158      	bne.n	8000bda <_malloc_r+0xf6>
 8000b28:	f8d8 4000 	ldr.w	r4, [r8]
 8000b2c:	4627      	mov	r7, r4
 8000b2e:	2f00      	cmp	r7, #0
 8000b30:	d143      	bne.n	8000bba <_malloc_r+0xd6>
 8000b32:	2c00      	cmp	r4, #0
 8000b34:	d04b      	beq.n	8000bce <_malloc_r+0xea>
 8000b36:	6823      	ldr	r3, [r4, #0]
 8000b38:	4639      	mov	r1, r7
 8000b3a:	4630      	mov	r0, r6
 8000b3c:	eb04 0903 	add.w	r9, r4, r3
 8000b40:	f000 f98c 	bl	8000e5c <_sbrk_r>
 8000b44:	4581      	cmp	r9, r0
 8000b46:	d142      	bne.n	8000bce <_malloc_r+0xea>
 8000b48:	6821      	ldr	r1, [r4, #0]
 8000b4a:	1a6d      	subs	r5, r5, r1
 8000b4c:	4629      	mov	r1, r5
 8000b4e:	4630      	mov	r0, r6
 8000b50:	f7ff ffa6 	bl	8000aa0 <sbrk_aligned>
 8000b54:	3001      	adds	r0, #1
 8000b56:	d03a      	beq.n	8000bce <_malloc_r+0xea>
 8000b58:	6823      	ldr	r3, [r4, #0]
 8000b5a:	442b      	add	r3, r5
 8000b5c:	6023      	str	r3, [r4, #0]
 8000b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	bb62      	cbnz	r2, 8000bc0 <_malloc_r+0xdc>
 8000b66:	f8c8 7000 	str.w	r7, [r8]
 8000b6a:	e00f      	b.n	8000b8c <_malloc_r+0xa8>
 8000b6c:	6822      	ldr	r2, [r4, #0]
 8000b6e:	1b52      	subs	r2, r2, r5
 8000b70:	d420      	bmi.n	8000bb4 <_malloc_r+0xd0>
 8000b72:	2a0b      	cmp	r2, #11
 8000b74:	d917      	bls.n	8000ba6 <_malloc_r+0xc2>
 8000b76:	1961      	adds	r1, r4, r5
 8000b78:	42a3      	cmp	r3, r4
 8000b7a:	6025      	str	r5, [r4, #0]
 8000b7c:	bf18      	it	ne
 8000b7e:	6059      	strne	r1, [r3, #4]
 8000b80:	6863      	ldr	r3, [r4, #4]
 8000b82:	bf08      	it	eq
 8000b84:	f8c8 1000 	streq.w	r1, [r8]
 8000b88:	5162      	str	r2, [r4, r5]
 8000b8a:	604b      	str	r3, [r1, #4]
 8000b8c:	4630      	mov	r0, r6
 8000b8e:	f000 f82f 	bl	8000bf0 <__malloc_unlock>
 8000b92:	f104 000b 	add.w	r0, r4, #11
 8000b96:	1d23      	adds	r3, r4, #4
 8000b98:	f020 0007 	bic.w	r0, r0, #7
 8000b9c:	1ac2      	subs	r2, r0, r3
 8000b9e:	bf1c      	itt	ne
 8000ba0:	1a1b      	subne	r3, r3, r0
 8000ba2:	50a3      	strne	r3, [r4, r2]
 8000ba4:	e7af      	b.n	8000b06 <_malloc_r+0x22>
 8000ba6:	6862      	ldr	r2, [r4, #4]
 8000ba8:	42a3      	cmp	r3, r4
 8000baa:	bf0c      	ite	eq
 8000bac:	f8c8 2000 	streq.w	r2, [r8]
 8000bb0:	605a      	strne	r2, [r3, #4]
 8000bb2:	e7eb      	b.n	8000b8c <_malloc_r+0xa8>
 8000bb4:	4623      	mov	r3, r4
 8000bb6:	6864      	ldr	r4, [r4, #4]
 8000bb8:	e7ae      	b.n	8000b18 <_malloc_r+0x34>
 8000bba:	463c      	mov	r4, r7
 8000bbc:	687f      	ldr	r7, [r7, #4]
 8000bbe:	e7b6      	b.n	8000b2e <_malloc_r+0x4a>
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	42a3      	cmp	r3, r4
 8000bc6:	d1fb      	bne.n	8000bc0 <_malloc_r+0xdc>
 8000bc8:	2300      	movs	r3, #0
 8000bca:	6053      	str	r3, [r2, #4]
 8000bcc:	e7de      	b.n	8000b8c <_malloc_r+0xa8>
 8000bce:	230c      	movs	r3, #12
 8000bd0:	6033      	str	r3, [r6, #0]
 8000bd2:	4630      	mov	r0, r6
 8000bd4:	f000 f80c 	bl	8000bf0 <__malloc_unlock>
 8000bd8:	e794      	b.n	8000b04 <_malloc_r+0x20>
 8000bda:	6005      	str	r5, [r0, #0]
 8000bdc:	e7d6      	b.n	8000b8c <_malloc_r+0xa8>
 8000bde:	bf00      	nop
 8000be0:	200001c4 	.word	0x200001c4

08000be4 <__malloc_lock>:
 8000be4:	4801      	ldr	r0, [pc, #4]	@ (8000bec <__malloc_lock+0x8>)
 8000be6:	f7ff bf0e 	b.w	8000a06 <__retarget_lock_acquire_recursive>
 8000bea:	bf00      	nop
 8000bec:	200001bc 	.word	0x200001bc

08000bf0 <__malloc_unlock>:
 8000bf0:	4801      	ldr	r0, [pc, #4]	@ (8000bf8 <__malloc_unlock+0x8>)
 8000bf2:	f7ff bf09 	b.w	8000a08 <__retarget_lock_release_recursive>
 8000bf6:	bf00      	nop
 8000bf8:	200001bc 	.word	0x200001bc

08000bfc <__sflush_r>:
 8000bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c04:	0716      	lsls	r6, r2, #28
 8000c06:	4605      	mov	r5, r0
 8000c08:	460c      	mov	r4, r1
 8000c0a:	d454      	bmi.n	8000cb6 <__sflush_r+0xba>
 8000c0c:	684b      	ldr	r3, [r1, #4]
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dc02      	bgt.n	8000c18 <__sflush_r+0x1c>
 8000c12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	dd48      	ble.n	8000caa <__sflush_r+0xae>
 8000c18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c1a:	2e00      	cmp	r6, #0
 8000c1c:	d045      	beq.n	8000caa <__sflush_r+0xae>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c24:	682f      	ldr	r7, [r5, #0]
 8000c26:	6a21      	ldr	r1, [r4, #32]
 8000c28:	602b      	str	r3, [r5, #0]
 8000c2a:	d030      	beq.n	8000c8e <__sflush_r+0x92>
 8000c2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c2e:	89a3      	ldrh	r3, [r4, #12]
 8000c30:	0759      	lsls	r1, r3, #29
 8000c32:	d505      	bpl.n	8000c40 <__sflush_r+0x44>
 8000c34:	6863      	ldr	r3, [r4, #4]
 8000c36:	1ad2      	subs	r2, r2, r3
 8000c38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c3a:	b10b      	cbz	r3, 8000c40 <__sflush_r+0x44>
 8000c3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c3e:	1ad2      	subs	r2, r2, r3
 8000c40:	2300      	movs	r3, #0
 8000c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c44:	6a21      	ldr	r1, [r4, #32]
 8000c46:	4628      	mov	r0, r5
 8000c48:	47b0      	blx	r6
 8000c4a:	1c43      	adds	r3, r0, #1
 8000c4c:	89a3      	ldrh	r3, [r4, #12]
 8000c4e:	d106      	bne.n	8000c5e <__sflush_r+0x62>
 8000c50:	6829      	ldr	r1, [r5, #0]
 8000c52:	291d      	cmp	r1, #29
 8000c54:	d82b      	bhi.n	8000cae <__sflush_r+0xb2>
 8000c56:	4a2a      	ldr	r2, [pc, #168]	@ (8000d00 <__sflush_r+0x104>)
 8000c58:	40ca      	lsrs	r2, r1
 8000c5a:	07d6      	lsls	r6, r2, #31
 8000c5c:	d527      	bpl.n	8000cae <__sflush_r+0xb2>
 8000c5e:	2200      	movs	r2, #0
 8000c60:	6062      	str	r2, [r4, #4]
 8000c62:	04d9      	lsls	r1, r3, #19
 8000c64:	6922      	ldr	r2, [r4, #16]
 8000c66:	6022      	str	r2, [r4, #0]
 8000c68:	d504      	bpl.n	8000c74 <__sflush_r+0x78>
 8000c6a:	1c42      	adds	r2, r0, #1
 8000c6c:	d101      	bne.n	8000c72 <__sflush_r+0x76>
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	b903      	cbnz	r3, 8000c74 <__sflush_r+0x78>
 8000c72:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c76:	602f      	str	r7, [r5, #0]
 8000c78:	b1b9      	cbz	r1, 8000caa <__sflush_r+0xae>
 8000c7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	d002      	beq.n	8000c88 <__sflush_r+0x8c>
 8000c82:	4628      	mov	r0, r5
 8000c84:	f7ff fec2 	bl	8000a0c <_free_r>
 8000c88:	2300      	movs	r3, #0
 8000c8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c8c:	e00d      	b.n	8000caa <__sflush_r+0xae>
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4628      	mov	r0, r5
 8000c92:	47b0      	blx	r6
 8000c94:	4602      	mov	r2, r0
 8000c96:	1c50      	adds	r0, r2, #1
 8000c98:	d1c9      	bne.n	8000c2e <__sflush_r+0x32>
 8000c9a:	682b      	ldr	r3, [r5, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0c6      	beq.n	8000c2e <__sflush_r+0x32>
 8000ca0:	2b1d      	cmp	r3, #29
 8000ca2:	d001      	beq.n	8000ca8 <__sflush_r+0xac>
 8000ca4:	2b16      	cmp	r3, #22
 8000ca6:	d11e      	bne.n	8000ce6 <__sflush_r+0xea>
 8000ca8:	602f      	str	r7, [r5, #0]
 8000caa:	2000      	movs	r0, #0
 8000cac:	e022      	b.n	8000cf4 <__sflush_r+0xf8>
 8000cae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb2:	b21b      	sxth	r3, r3
 8000cb4:	e01b      	b.n	8000cee <__sflush_r+0xf2>
 8000cb6:	690f      	ldr	r7, [r1, #16]
 8000cb8:	2f00      	cmp	r7, #0
 8000cba:	d0f6      	beq.n	8000caa <__sflush_r+0xae>
 8000cbc:	0793      	lsls	r3, r2, #30
 8000cbe:	680e      	ldr	r6, [r1, #0]
 8000cc0:	bf08      	it	eq
 8000cc2:	694b      	ldreq	r3, [r1, #20]
 8000cc4:	600f      	str	r7, [r1, #0]
 8000cc6:	bf18      	it	ne
 8000cc8:	2300      	movne	r3, #0
 8000cca:	eba6 0807 	sub.w	r8, r6, r7
 8000cce:	608b      	str	r3, [r1, #8]
 8000cd0:	f1b8 0f00 	cmp.w	r8, #0
 8000cd4:	dde9      	ble.n	8000caa <__sflush_r+0xae>
 8000cd6:	6a21      	ldr	r1, [r4, #32]
 8000cd8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000cda:	4643      	mov	r3, r8
 8000cdc:	463a      	mov	r2, r7
 8000cde:	4628      	mov	r0, r5
 8000ce0:	47b0      	blx	r6
 8000ce2:	2800      	cmp	r0, #0
 8000ce4:	dc08      	bgt.n	8000cf8 <__sflush_r+0xfc>
 8000ce6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cee:	81a3      	strh	r3, [r4, #12]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cf8:	4407      	add	r7, r0
 8000cfa:	eba8 0800 	sub.w	r8, r8, r0
 8000cfe:	e7e7      	b.n	8000cd0 <__sflush_r+0xd4>
 8000d00:	20400001 	.word	0x20400001

08000d04 <_fflush_r>:
 8000d04:	b538      	push	{r3, r4, r5, lr}
 8000d06:	690b      	ldr	r3, [r1, #16]
 8000d08:	4605      	mov	r5, r0
 8000d0a:	460c      	mov	r4, r1
 8000d0c:	b913      	cbnz	r3, 8000d14 <_fflush_r+0x10>
 8000d0e:	2500      	movs	r5, #0
 8000d10:	4628      	mov	r0, r5
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
 8000d14:	b118      	cbz	r0, 8000d1e <_fflush_r+0x1a>
 8000d16:	6a03      	ldr	r3, [r0, #32]
 8000d18:	b90b      	cbnz	r3, 8000d1e <_fflush_r+0x1a>
 8000d1a:	f7ff fc8f 	bl	800063c <__sinit>
 8000d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f3      	beq.n	8000d0e <_fflush_r+0xa>
 8000d26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d28:	07d0      	lsls	r0, r2, #31
 8000d2a:	d404      	bmi.n	8000d36 <_fflush_r+0x32>
 8000d2c:	0599      	lsls	r1, r3, #22
 8000d2e:	d402      	bmi.n	8000d36 <_fflush_r+0x32>
 8000d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d32:	f7ff fe68 	bl	8000a06 <__retarget_lock_acquire_recursive>
 8000d36:	4628      	mov	r0, r5
 8000d38:	4621      	mov	r1, r4
 8000d3a:	f7ff ff5f 	bl	8000bfc <__sflush_r>
 8000d3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d40:	07da      	lsls	r2, r3, #31
 8000d42:	4605      	mov	r5, r0
 8000d44:	d4e4      	bmi.n	8000d10 <_fflush_r+0xc>
 8000d46:	89a3      	ldrh	r3, [r4, #12]
 8000d48:	059b      	lsls	r3, r3, #22
 8000d4a:	d4e1      	bmi.n	8000d10 <_fflush_r+0xc>
 8000d4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d4e:	f7ff fe5b 	bl	8000a08 <__retarget_lock_release_recursive>
 8000d52:	e7dd      	b.n	8000d10 <_fflush_r+0xc>

08000d54 <__swhatbuf_r>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	460c      	mov	r4, r1
 8000d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d5c:	2900      	cmp	r1, #0
 8000d5e:	b096      	sub	sp, #88	@ 0x58
 8000d60:	4615      	mov	r5, r2
 8000d62:	461e      	mov	r6, r3
 8000d64:	da0d      	bge.n	8000d82 <__swhatbuf_r+0x2e>
 8000d66:	89a3      	ldrh	r3, [r4, #12]
 8000d68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d6c:	f04f 0100 	mov.w	r1, #0
 8000d70:	bf14      	ite	ne
 8000d72:	2340      	movne	r3, #64	@ 0x40
 8000d74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d78:	2000      	movs	r0, #0
 8000d7a:	6031      	str	r1, [r6, #0]
 8000d7c:	602b      	str	r3, [r5, #0]
 8000d7e:	b016      	add	sp, #88	@ 0x58
 8000d80:	bd70      	pop	{r4, r5, r6, pc}
 8000d82:	466a      	mov	r2, sp
 8000d84:	f000 f848 	bl	8000e18 <_fstat_r>
 8000d88:	2800      	cmp	r0, #0
 8000d8a:	dbec      	blt.n	8000d66 <__swhatbuf_r+0x12>
 8000d8c:	9901      	ldr	r1, [sp, #4]
 8000d8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d96:	4259      	negs	r1, r3
 8000d98:	4159      	adcs	r1, r3
 8000d9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d9e:	e7eb      	b.n	8000d78 <__swhatbuf_r+0x24>

08000da0 <__smakebuf_r>:
 8000da0:	898b      	ldrh	r3, [r1, #12]
 8000da2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000da4:	079d      	lsls	r5, r3, #30
 8000da6:	4606      	mov	r6, r0
 8000da8:	460c      	mov	r4, r1
 8000daa:	d507      	bpl.n	8000dbc <__smakebuf_r+0x1c>
 8000dac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	6123      	str	r3, [r4, #16]
 8000db4:	2301      	movs	r3, #1
 8000db6:	6163      	str	r3, [r4, #20]
 8000db8:	b003      	add	sp, #12
 8000dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dbc:	ab01      	add	r3, sp, #4
 8000dbe:	466a      	mov	r2, sp
 8000dc0:	f7ff ffc8 	bl	8000d54 <__swhatbuf_r>
 8000dc4:	9f00      	ldr	r7, [sp, #0]
 8000dc6:	4605      	mov	r5, r0
 8000dc8:	4639      	mov	r1, r7
 8000dca:	4630      	mov	r0, r6
 8000dcc:	f7ff fe8a 	bl	8000ae4 <_malloc_r>
 8000dd0:	b948      	cbnz	r0, 8000de6 <__smakebuf_r+0x46>
 8000dd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dd6:	059a      	lsls	r2, r3, #22
 8000dd8:	d4ee      	bmi.n	8000db8 <__smakebuf_r+0x18>
 8000dda:	f023 0303 	bic.w	r3, r3, #3
 8000dde:	f043 0302 	orr.w	r3, r3, #2
 8000de2:	81a3      	strh	r3, [r4, #12]
 8000de4:	e7e2      	b.n	8000dac <__smakebuf_r+0xc>
 8000de6:	89a3      	ldrh	r3, [r4, #12]
 8000de8:	6020      	str	r0, [r4, #0]
 8000dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dee:	81a3      	strh	r3, [r4, #12]
 8000df0:	9b01      	ldr	r3, [sp, #4]
 8000df2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000df6:	b15b      	cbz	r3, 8000e10 <__smakebuf_r+0x70>
 8000df8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000dfc:	4630      	mov	r0, r6
 8000dfe:	f000 f81d 	bl	8000e3c <_isatty_r>
 8000e02:	b128      	cbz	r0, 8000e10 <__smakebuf_r+0x70>
 8000e04:	89a3      	ldrh	r3, [r4, #12]
 8000e06:	f023 0303 	bic.w	r3, r3, #3
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	81a3      	strh	r3, [r4, #12]
 8000e10:	89a3      	ldrh	r3, [r4, #12]
 8000e12:	431d      	orrs	r5, r3
 8000e14:	81a5      	strh	r5, [r4, #12]
 8000e16:	e7cf      	b.n	8000db8 <__smakebuf_r+0x18>

08000e18 <_fstat_r>:
 8000e18:	b538      	push	{r3, r4, r5, lr}
 8000e1a:	4d07      	ldr	r5, [pc, #28]	@ (8000e38 <_fstat_r+0x20>)
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	4604      	mov	r4, r0
 8000e20:	4608      	mov	r0, r1
 8000e22:	4611      	mov	r1, r2
 8000e24:	602b      	str	r3, [r5, #0]
 8000e26:	f7ff fa42 	bl	80002ae <_fstat>
 8000e2a:	1c43      	adds	r3, r0, #1
 8000e2c:	d102      	bne.n	8000e34 <_fstat_r+0x1c>
 8000e2e:	682b      	ldr	r3, [r5, #0]
 8000e30:	b103      	cbz	r3, 8000e34 <_fstat_r+0x1c>
 8000e32:	6023      	str	r3, [r4, #0]
 8000e34:	bd38      	pop	{r3, r4, r5, pc}
 8000e36:	bf00      	nop
 8000e38:	200001b8 	.word	0x200001b8

08000e3c <_isatty_r>:
 8000e3c:	b538      	push	{r3, r4, r5, lr}
 8000e3e:	4d06      	ldr	r5, [pc, #24]	@ (8000e58 <_isatty_r+0x1c>)
 8000e40:	2300      	movs	r3, #0
 8000e42:	4604      	mov	r4, r0
 8000e44:	4608      	mov	r0, r1
 8000e46:	602b      	str	r3, [r5, #0]
 8000e48:	f7ff fa41 	bl	80002ce <_isatty>
 8000e4c:	1c43      	adds	r3, r0, #1
 8000e4e:	d102      	bne.n	8000e56 <_isatty_r+0x1a>
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	b103      	cbz	r3, 8000e56 <_isatty_r+0x1a>
 8000e54:	6023      	str	r3, [r4, #0]
 8000e56:	bd38      	pop	{r3, r4, r5, pc}
 8000e58:	200001b8 	.word	0x200001b8

08000e5c <_sbrk_r>:
 8000e5c:	b538      	push	{r3, r4, r5, lr}
 8000e5e:	4d06      	ldr	r5, [pc, #24]	@ (8000e78 <_sbrk_r+0x1c>)
 8000e60:	2300      	movs	r3, #0
 8000e62:	4604      	mov	r4, r0
 8000e64:	4608      	mov	r0, r1
 8000e66:	602b      	str	r3, [r5, #0]
 8000e68:	f7ff fa4a 	bl	8000300 <_sbrk>
 8000e6c:	1c43      	adds	r3, r0, #1
 8000e6e:	d102      	bne.n	8000e76 <_sbrk_r+0x1a>
 8000e70:	682b      	ldr	r3, [r5, #0]
 8000e72:	b103      	cbz	r3, 8000e76 <_sbrk_r+0x1a>
 8000e74:	6023      	str	r3, [r4, #0]
 8000e76:	bd38      	pop	{r3, r4, r5, pc}
 8000e78:	200001b8 	.word	0x200001b8

08000e7c <_init>:
 8000e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e7e:	bf00      	nop
 8000e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e82:	bc08      	pop	{r3}
 8000e84:	469e      	mov	lr, r3
 8000e86:	4770      	bx	lr

08000e88 <_fini>:
 8000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e8a:	bf00      	nop
 8000e8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e8e:	bc08      	pop	{r3}
 8000e90:	469e      	mov	lr, r3
 8000e92:	4770      	bx	lr
